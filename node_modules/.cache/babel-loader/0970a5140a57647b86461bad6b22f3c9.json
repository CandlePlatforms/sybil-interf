{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { abi as GOVERNANCE_ABI } from '@uniswap/governance/build/GovernorAlpha.json';\nimport { useIsAave, useGovernanceContractBravo } from 'hooks/useContract';\nimport { useMultipleContractSingleData, useSingleCallResult } from 'state/multicall/hooks';\nimport { useActiveProtocol } from 'state/governance/hooks';\nimport { Interface } from '@ethersproject/abi';\nimport { notEmpty } from 'utils';\nimport GOVERNANCE_AAVE_ABI from '../../constants/abis/aave-governance.json';\n/**\n * Various versions of proposal count fetching.\n * Compound Alpha and forks like Uniswap can sum proposal counts on\n * versions of Alpha.\n *\n * Other protocols with Bravo need custom counting - aka Compound Bravo\n *\n */\n// get count of all proposals made - need to check different versions of alpha\n\nexport function useGenericAlphaProposalCounts() {\n  _s();\n\n  const [activeProtocol] = useActiveProtocol(); // custom method name on Aave\n\n  const methodName = useIsAave() ? 'getProposalsCount' : 'proposalCount'; // for each alpha, get proposal count\n\n  const alphaCountRes = useMultipleContractSingleData(activeProtocol ? activeProtocol === null || activeProtocol === void 0 ? void 0 : activeProtocol.governanceAlphaAddresses : [], new Interface(useIsAave() ? GOVERNANCE_AAVE_ABI : GOVERNANCE_ABI), methodName); // sum up responses\n\n  const parsedAlphaCounts = alphaCountRes.map(res => {\n    if (res.result && !res.loading && !res.error) {\n      return parseFloat(res.result[0]);\n    }\n\n    return undefined;\n  });\n  const allLoaded = !parsedAlphaCounts.some(x => x === undefined);\n\n  if (!allLoaded) {\n    return undefined;\n  }\n\n  return parsedAlphaCounts.filter(notEmpty);\n} // get count of all proposals made\n\n_s(useGenericAlphaProposalCounts, \"5Nz3YPKfiraqVTSoYr3OsC8I8l4=\", false, function () {\n  return [useActiveProtocol, useIsAave, useMultipleContractSingleData, useIsAave];\n});\n\nexport function useGenericBravoProposalCount() {\n  _s2();\n\n  const bravo = useGovernanceContractBravo();\n  const res = useSingleCallResult(bravo, useIsAave() ? 'getProposalsCount' : 'proposalCount');\n\n  if (res.result && !res.loading) {\n    return parseInt(res.result[0]);\n  }\n\n  return undefined;\n}\n\n_s2(useGenericBravoProposalCount, \"N+LB+sDTsL9h2RiPv7J3D2fTyM8=\", false, function () {\n  return [useGovernanceContractBravo, useSingleCallResult, useIsAave];\n});","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/sybil-interf/src/data/proposalCount.ts/index.ts"],"names":["abi","GOVERNANCE_ABI","useIsAave","useGovernanceContractBravo","useMultipleContractSingleData","useSingleCallResult","useActiveProtocol","Interface","notEmpty","GOVERNANCE_AAVE_ABI","useGenericAlphaProposalCounts","activeProtocol","methodName","alphaCountRes","governanceAlphaAddresses","parsedAlphaCounts","map","res","result","loading","error","parseFloat","undefined","allLoaded","some","x","filter","useGenericBravoProposalCount","bravo","parseInt"],"mappings":";;;AAAA,SAASA,GAAG,IAAIC,cAAhB,QAAsC,8CAAtC;AACA,SAASC,SAAT,EAAoBC,0BAApB,QAAsD,mBAAtD;AACA,SAASC,6BAAT,EAAwCC,mBAAxC,QAAmE,uBAAnE;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,mBAAP,MAAgC,2CAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,SAASC,6BAAT,GAA+D;AAAA;;AACpE,QAAM,CAACC,cAAD,IAAmBL,iBAAiB,EAA1C,CADoE,CAGpE;;AACA,QAAMM,UAAU,GAAGV,SAAS,KAAK,mBAAL,GAA2B,eAAvD,CAJoE,CAMpE;;AACA,QAAMW,aAAa,GAAGT,6BAA6B,CACjDO,cAAc,GAAGA,cAAH,aAAGA,cAAH,uBAAGA,cAAc,CAAEG,wBAAnB,GAA8C,EADX,EAEjD,IAAIP,SAAJ,CAAcL,SAAS,KAAKO,mBAAL,GAA2BR,cAAlD,CAFiD,EAGjDW,UAHiD,CAAnD,CAPoE,CAapE;;AACA,QAAMG,iBAAiB,GAAGF,aAAa,CAACG,GAAd,CAAmBC,GAAD,IAAS;AACnD,QAAIA,GAAG,CAACC,MAAJ,IAAc,CAACD,GAAG,CAACE,OAAnB,IAA8B,CAACF,GAAG,CAACG,KAAvC,EAA8C;AAC5C,aAAOC,UAAU,CAACJ,GAAG,CAACC,MAAJ,CAAW,CAAX,CAAD,CAAjB;AACD;;AACD,WAAOI,SAAP;AACD,GALyB,CAA1B;AAOA,QAAMC,SAAS,GAAG,CAACR,iBAAiB,CAACS,IAAlB,CAAwBC,CAAD,IAAOA,CAAC,KAAKH,SAApC,CAAnB;;AAEA,MAAI,CAACC,SAAL,EAAgB;AACd,WAAOD,SAAP;AACD;;AAED,SAAOP,iBAAiB,CAACW,MAAlB,CAAyBlB,QAAzB,CAAP;AACD,C,CAED;;GA9BgBE,6B;UACWJ,iB,EAGNJ,S,EAGGE,6B,EAENF,S;;;AAsBlB,OAAO,SAASyB,4BAAT,GAA4D;AAAA;;AACjE,QAAMC,KAAK,GAAGzB,0BAA0B,EAAxC;AACA,QAAMc,GAAG,GAAGZ,mBAAmB,CAACuB,KAAD,EAAQ1B,SAAS,KAAK,mBAAL,GAA2B,eAA5C,CAA/B;;AAEA,MAAIe,GAAG,CAACC,MAAJ,IAAc,CAACD,GAAG,CAACE,OAAvB,EAAgC;AAC9B,WAAOU,QAAQ,CAACZ,GAAG,CAACC,MAAJ,CAAW,CAAX,CAAD,CAAf;AACD;;AACD,SAAOI,SAAP;AACD;;IAReK,4B;UACAxB,0B,EACFE,mB,EAA2BH,S","sourcesContent":["import { abi as GOVERNANCE_ABI } from '@uniswap/governance/build/GovernorAlpha.json'\nimport { useIsAave, useGovernanceContractBravo } from 'hooks/useContract'\nimport { useMultipleContractSingleData, useSingleCallResult } from 'state/multicall/hooks'\nimport { useActiveProtocol } from 'state/governance/hooks'\nimport { Interface } from '@ethersproject/abi'\nimport { notEmpty } from 'utils'\nimport GOVERNANCE_AAVE_ABI from '../../constants/abis/aave-governance.json'\n/**\n * Various versions of proposal count fetching.\n * Compound Alpha and forks like Uniswap can sum proposal counts on\n * versions of Alpha.\n *\n * Other protocols with Bravo need custom counting - aka Compound Bravo\n *\n */\n\n// get count of all proposals made - need to check different versions of alpha\nexport function useGenericAlphaProposalCounts(): number[] | undefined {\n  const [activeProtocol] = useActiveProtocol()\n\n  // custom method name on Aave\n  const methodName = useIsAave() ? 'getProposalsCount' : 'proposalCount'\n\n  // for each alpha, get proposal count\n  const alphaCountRes = useMultipleContractSingleData(\n    activeProtocol ? activeProtocol?.governanceAlphaAddresses : [],\n    new Interface(useIsAave() ? GOVERNANCE_AAVE_ABI : GOVERNANCE_ABI),\n    methodName\n  )\n\n  // sum up responses\n  const parsedAlphaCounts = alphaCountRes.map((res) => {\n    if (res.result && !res.loading && !res.error) {\n      return parseFloat(res.result[0])\n    }\n    return undefined\n  })\n\n  const allLoaded = !parsedAlphaCounts.some((x) => x === undefined)\n\n  if (!allLoaded) {\n    return undefined\n  }\n\n  return parsedAlphaCounts.filter(notEmpty)\n}\n\n// get count of all proposals made\nexport function useGenericBravoProposalCount(): number | undefined {\n  const bravo = useGovernanceContractBravo()\n  const res = useSingleCallResult(bravo, useIsAave() ? 'getProposalsCount' : 'proposalCount')\n\n  if (res.result && !res.loading) {\n    return parseInt(res.result[0])\n  }\n  return undefined\n}\n"]},"metadata":{},"sourceType":"module"}