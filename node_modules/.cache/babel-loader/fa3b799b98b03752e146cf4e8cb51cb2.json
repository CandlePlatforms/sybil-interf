{"ast":null,"code":"import { Contract } from '@ethersproject/contracts';\nimport { getAddress } from '@ethersproject/address';\nimport { AddressZero } from '@ethersproject/constants';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { JSBI, Percent } from '@uniswap/sdk'; // returns the checksummed address if the address is valid, otherwise returns false\n\nexport function isAddress(value) {\n  try {\n    return getAddress(value);\n  } catch {\n    return false;\n  }\n}\nconst ETHERSCAN_PREFIXES = {\n  1: '',\n  3: 'ropsten.',\n  4: 'rinkeby.',\n  5: 'goerli.',\n  42: 'kovan.'\n};\nexport function getTwitterProfileLink(accountName) {\n  const urlBase = 'https://twitter.com/';\n  return urlBase + accountName;\n}\nexport function getEtherscanLink(chainId, data, type) {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`;\n\n  switch (type) {\n    case 'transaction':\n      {\n        return `${prefix}/tx/${data}`;\n      }\n\n    case 'token':\n      {\n        return `${prefix}/token/${data}`;\n      }\n\n    case 'block':\n      {\n        return `${prefix}/block/${data}`;\n      }\n\n    case 'address':\n    default:\n      {\n        return `${prefix}/address/${data}`;\n      }\n  }\n} // shorten the checksummed version of the input address to have 0x + 4 characters at start and end\n\nexport function shortenAddress(address, chars = 4) {\n  const parsed = isAddress(address);\n\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`;\n} // add 10%\n\nexport function calculateGasMargin(value) {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000));\n} // converts a basis points value to a sdk percent\n\nexport function basisPointsToPercent(num) {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000));\n}\nexport function calculateSlippageAmount(value, slippage) {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`);\n  }\n\n  return [JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)), JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000))];\n} // account is not optional\n\nexport function getSigner(library, account) {\n  return library.getSigner(account).connectUnchecked();\n} // account is optional\n\nexport function getProviderOrSigner(library, account) {\n  return account ? getSigner(library, account) : library;\n} // account is optional\n\nexport function getContract(address, ABI, library, account) {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`);\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account));\n}\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\nexport function notEmpty(value) {\n  return value !== null && value !== undefined;\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/sybil-interface-candle/src/utils/index.ts"],"names":["Contract","getAddress","AddressZero","BigNumber","JSBI","Percent","isAddress","value","ETHERSCAN_PREFIXES","getTwitterProfileLink","accountName","urlBase","getEtherscanLink","chainId","data","type","prefix","shortenAddress","address","chars","parsed","Error","substring","calculateGasMargin","mul","from","add","div","basisPointsToPercent","num","BigInt","calculateSlippageAmount","slippage","divide","multiply","raw","getSigner","library","account","connectUnchecked","getProviderOrSigner","getContract","ABI","escapeRegExp","string","replace","notEmpty","undefined"],"mappings":"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","sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { getAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\nimport { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { ChainId, JSBI, Percent, CurrencyAmount } from '@uniswap/sdk'\n\n// returns the checksummed address if the address is valid, otherwise returns false\nexport function isAddress(value: any): string | false {\n  try {\n    return getAddress(value)\n  } catch {\n    return false\n  }\n}\n\nconst ETHERSCAN_PREFIXES: { [chainId in ChainId]: string } = {\n  1: '',\n  3: 'ropsten.',\n  4: 'rinkeby.',\n  5: 'goerli.',\n  42: 'kovan.',\n}\n\nexport function getTwitterProfileLink(accountName: string): string {\n  const urlBase = 'https://twitter.com/'\n  return urlBase + accountName\n}\n\nexport function getEtherscanLink(\n  chainId: ChainId,\n  data: string,\n  type: 'transaction' | 'token' | 'address' | 'block'\n): string {\n  const prefix = `https://${ETHERSCAN_PREFIXES[chainId] || ETHERSCAN_PREFIXES[1]}etherscan.io`\n\n  switch (type) {\n    case 'transaction': {\n      return `${prefix}/tx/${data}`\n    }\n    case 'token': {\n      return `${prefix}/token/${data}`\n    }\n    case 'block': {\n      return `${prefix}/block/${data}`\n    }\n    case 'address':\n    default: {\n      return `${prefix}/address/${data}`\n    }\n  }\n}\n\n// shorten the checksummed version of the input address to have 0x + 4 characters at start and end\nexport function shortenAddress(address: string, chars = 4): string {\n  const parsed = isAddress(address)\n  if (!parsed) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n  return `${parsed.substring(0, chars + 2)}...${parsed.substring(42 - chars)}`\n}\n\n// add 10%\nexport function calculateGasMargin(value: BigNumber): BigNumber {\n  return value.mul(BigNumber.from(10000).add(BigNumber.from(1000))).div(BigNumber.from(10000))\n}\n\n// converts a basis points value to a sdk percent\nexport function basisPointsToPercent(num: number): Percent {\n  return new Percent(JSBI.BigInt(num), JSBI.BigInt(10000))\n}\n\nexport function calculateSlippageAmount(value: CurrencyAmount, slippage: number): [JSBI, JSBI] {\n  if (slippage < 0 || slippage > 10000) {\n    throw Error(`Unexpected slippage value: ${slippage}`)\n  }\n  return [\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 - slippage)), JSBI.BigInt(10000)),\n    JSBI.divide(JSBI.multiply(value.raw, JSBI.BigInt(10000 + slippage)), JSBI.BigInt(10000)),\n  ]\n}\n\n// account is not optional\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\n  return library.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\n  return account ? getSigner(library, account) : library\n}\n\n// account is optional\nexport function getContract(address: string, ABI: any, library: Web3Provider, account?: string): Contract {\n  if (!isAddress(address) || address === AddressZero) {\n    throw Error(`Invalid 'address' parameter '${address}'.`)\n  }\n\n  return new Contract(address, ABI, getProviderOrSigner(library, account) as any)\n}\n\nexport function escapeRegExp(string: string): string {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') // $& means the whole matched string\n}\n\nexport function notEmpty<TValue>(value: TValue | null | undefined): value is TValue {\n  return value !== null && value !== undefined\n}\n"]},"metadata":{},"sourceType":"module"}