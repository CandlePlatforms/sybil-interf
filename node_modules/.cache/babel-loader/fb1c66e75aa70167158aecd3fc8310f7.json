{"ast":null,"code":"/*\n *  toFormat v2.0.0\n *  Adds a toFormat instance method to big.js or decimal.js\n *  Copyright (c) 2017 Michael Mclaughlin\n *  MIT Licence\n */\n\n/*\n* Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\n* a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\n*/\nfunction toFormat(Ctor) {\n  'use strict';\n  /*\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\n   *\n   *  Example:\n   *\n   *  x = new Decimal('123456789.987654321')\n   *\n   *  // Add a format object to the constructor...\n   *  Decimal.format = {\n   *    decimalSeparator: '.',\n   *    groupSeparator: ',',\n   *    groupSize: 3,\n   *    secondaryGroupSize: 0,\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\n   *    fractionGroupSize : 0\n   *  }\n   *\n   *  x.toFormat();                // 123,456,789.987654321\n   *  x.toFormat(2, 1);            // 123,456,789.98\n   *\n   *  // And/or add a format object to the big number itself...\n   *  x.format = {\n   *    decimalSeparator: ',',\n   *    groupSeparator: '',\n   *  }\n   *\n   *  x.toFormat();                // 123456789,987654321\n   *\n   *  format = {\n   *    decimalSeparator: '.',\n   *    groupSeparator: ' ',\n   *    groupSize: 3,\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\n   *    fractionGroupSize : 5\n   *  }\n    *  // And/or pass a format object to the method call.\n   *  x.toFormat(format);          // 123 456 789.98765 4321\n   *  x.toFormat(4, format);       // 123 456 789.9877\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\n   *\n   *  [dp] {number} Decimal places. Integer.\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\n   *  [fmt] {Object} A format object.\n   *\n   */\n\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\n    if (!this.e && this.e !== 0) return this.toString(); // Infinity/NaN\n\n    var arr,\n        g1,\n        g2,\n        i,\n        u,\n        // undefined\n    nd,\n        // number of integer digits\n    intd,\n        // integer digits\n    intp,\n        // integer part\n    fracp,\n        // fraction part\n    dsep,\n        // decimalSeparator\n    gsep,\n        // groupSeparator\n    gsize,\n        // groupSize\n    sgsize,\n        // secondaryGroupSize\n    fgsep,\n        // fractionGroupSeparator\n    fgsize,\n        // fractionGroupSize\n    tfmt = this.format || {},\n        cfmt = this.constructor.format || {};\n\n    if (dp != u) {\n      if (typeof dp == 'object') {\n        fmt = dp;\n        dp = u;\n      } else if (rm != u) {\n        if (typeof rm == 'object') {\n          fmt = rm;\n          rm = u;\n        } else if (typeof fmt != 'object') {\n          fmt = {};\n        }\n      } else {\n        fmt = {};\n      }\n    } else {\n      fmt = {};\n    }\n\n    arr = this.toFixed(dp, rm).split('.');\n    intp = arr[0];\n    fracp = arr[1];\n    intd = this.s < 0 ? intp.slice(1) : intp;\n    nd = intd.length;\n    dsep = fmt.decimalSeparator;\n\n    if (dsep == u) {\n      dsep = tfmt.decimalSeparator;\n\n      if (dsep == u) {\n        dsep = cfmt.decimalSeparator;\n        if (dsep == u) dsep = '.';\n      }\n    }\n\n    gsep = fmt.groupSeparator;\n\n    if (gsep == u) {\n      gsep = tfmt.groupSeparator;\n      if (gsep == u) gsep = cfmt.groupSeparator;\n    }\n\n    if (gsep) {\n      gsize = fmt.groupSize;\n\n      if (gsize == u) {\n        gsize = tfmt.groupSize;\n\n        if (gsize == u) {\n          gsize = cfmt.groupSize;\n          if (gsize == u) gsize = 0;\n        }\n      }\n\n      sgsize = fmt.secondaryGroupSize;\n\n      if (sgsize == u) {\n        sgsize = tfmt.secondaryGroupSize;\n\n        if (sgsize == u) {\n          sgsize = cfmt.secondaryGroupSize;\n          if (sgsize == u) sgsize = 0;\n        }\n      }\n\n      if (sgsize) {\n        g1 = +sgsize;\n        g2 = +gsize;\n        nd -= g2;\n      } else {\n        g1 = +gsize;\n        g2 = +sgsize;\n      }\n\n      if (g1 > 0 && nd > 0) {\n        i = nd % g1 || g1;\n        intp = intd.substr(0, i);\n\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\n\n        if (g2 > 0) intp += gsep + intd.slice(i);\n        if (this.s < 0) intp = '-' + intp;\n      }\n    }\n\n    if (fracp) {\n      fgsep = fmt.fractionGroupSeparator;\n\n      if (fgsep == u) {\n        fgsep = tfmt.fractionGroupSeparator;\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\n      }\n\n      if (fgsep) {\n        fgsize = fmt.fractionGroupSize;\n\n        if (fgsize == u) {\n          fgsize = tfmt.fractionGroupSize;\n\n          if (fgsize == u) {\n            fgsize = cfmt.fractionGroupSize;\n            if (fgsize == u) fgsize = 0;\n          }\n        }\n\n        fgsize = +fgsize;\n\n        if (fgsize) {\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\n        }\n      }\n\n      return intp + dsep + fracp;\n    } else {\n      return intp;\n    }\n  };\n\n  Ctor.format = {\n    decimalSeparator: '.',\n    groupSeparator: ',',\n    groupSize: 3,\n    secondaryGroupSize: 0,\n    fractionGroupSeparator: '',\n    fractionGroupSize: 0\n  };\n  return Ctor;\n}\n\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/sybil-interf/node_modules/toformat/toFormat.js"],"names":["toFormat","Ctor","prototype","dp","rm","fmt","e","toString","arr","g1","g2","i","u","nd","intd","intp","fracp","dsep","gsep","gsize","sgsize","fgsep","fgsize","tfmt","format","cfmt","constructor","toFixed","split","s","slice","length","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","substr","fractionGroupSeparator","fractionGroupSize","replace","RegExp","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEC;AACD;AACA;AACA;AACA,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AACtB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEEA,EAAAA,IAAI,CAACC,SAAL,CAAeF,QAAf,GAA0B,SAASA,QAAT,CAAkBG,EAAlB,EAAsBC,EAAtB,EAA0BC,GAA1B,EAA+B;AAEvD,QAAI,CAAC,KAAKC,CAAN,IAAW,KAAKA,CAAL,KAAW,CAA1B,EAA6B,OAAO,KAAKC,QAAL,EAAP,CAF0B,CAEA;;AAEvD,QAAIC,GAAJ;AAAA,QAASC,EAAT;AAAA,QAAaC,EAAb;AAAA,QAAiBC,CAAjB;AAAA,QACEC,CADF;AAAA,QACiC;AAC/BC,IAAAA,EAFF;AAAA,QAEiC;AAC/BC,IAAAA,IAHF;AAAA,QAGiC;AAC/BC,IAAAA,IAJF;AAAA,QAIiC;AAC/BC,IAAAA,KALF;AAAA,QAKiC;AAC/BC,IAAAA,IANF;AAAA,QAMiC;AAC/BC,IAAAA,IAPF;AAAA,QAOiC;AAC/BC,IAAAA,KARF;AAAA,QAQiC;AAC/BC,IAAAA,MATF;AAAA,QASiC;AAC/BC,IAAAA,KAVF;AAAA,QAUiC;AAC/BC,IAAAA,MAXF;AAAA,QAWiC;AAC/BC,IAAAA,IAAI,GAAG,KAAKC,MAAL,IAAe,EAZxB;AAAA,QAaEC,IAAI,GAAG,KAAKC,WAAL,CAAiBF,MAAjB,IAA2B,EAbpC;;AAeA,QAAIrB,EAAE,IAAIS,CAAV,EAAa;AACX,UAAI,OAAOT,EAAP,IAAa,QAAjB,EAA2B;AACzBE,QAAAA,GAAG,GAAGF,EAAN;AACAA,QAAAA,EAAE,GAAGS,CAAL;AACD,OAHD,MAGO,IAAIR,EAAE,IAAIQ,CAAV,EAAa;AAClB,YAAI,OAAOR,EAAP,IAAa,QAAjB,EAA2B;AACzBC,UAAAA,GAAG,GAAGD,EAAN;AACAA,UAAAA,EAAE,GAAGQ,CAAL;AACD,SAHD,MAGO,IAAI,OAAOP,GAAP,IAAc,QAAlB,EAA4B;AACjCA,UAAAA,GAAG,GAAG,EAAN;AACD;AACF,OAPM,MAOA;AACLA,QAAAA,GAAG,GAAG,EAAN;AACD;AACF,KAdD,MAcO;AACLA,MAAAA,GAAG,GAAG,EAAN;AACD;;AAEDG,IAAAA,GAAG,GAAG,KAAKmB,OAAL,CAAaxB,EAAb,EAAiBC,EAAjB,EAAqBwB,KAArB,CAA2B,GAA3B,CAAN;AACAb,IAAAA,IAAI,GAAGP,GAAG,CAAC,CAAD,CAAV;AACAQ,IAAAA,KAAK,GAAGR,GAAG,CAAC,CAAD,CAAX;AACAM,IAAAA,IAAI,GAAG,KAAKe,CAAL,GAAS,CAAT,GAAad,IAAI,CAACe,KAAL,CAAW,CAAX,CAAb,GAA6Bf,IAApC;AACAF,IAAAA,EAAE,GAAGC,IAAI,CAACiB,MAAV;AAEAd,IAAAA,IAAI,GAAGZ,GAAG,CAAC2B,gBAAX;;AACA,QAAIf,IAAI,IAAIL,CAAZ,EAAe;AACbK,MAAAA,IAAI,GAAGM,IAAI,CAACS,gBAAZ;;AACA,UAAIf,IAAI,IAAIL,CAAZ,EAAe;AACbK,QAAAA,IAAI,GAAGQ,IAAI,CAACO,gBAAZ;AACA,YAAIf,IAAI,IAAIL,CAAZ,EAAeK,IAAI,GAAG,GAAP;AAChB;AACF;;AAEDC,IAAAA,IAAI,GAAGb,GAAG,CAAC4B,cAAX;;AACA,QAAIf,IAAI,IAAIN,CAAZ,EAAe;AACbM,MAAAA,IAAI,GAAGK,IAAI,CAACU,cAAZ;AACA,UAAIf,IAAI,IAAIN,CAAZ,EAAeM,IAAI,GAAGO,IAAI,CAACQ,cAAZ;AAChB;;AAED,QAAIf,IAAJ,EAAU;AACRC,MAAAA,KAAK,GAAGd,GAAG,CAAC6B,SAAZ;;AACA,UAAIf,KAAK,IAAIP,CAAb,EAAgB;AACdO,QAAAA,KAAK,GAAGI,IAAI,CAACW,SAAb;;AACA,YAAIf,KAAK,IAAIP,CAAb,EAAgB;AACdO,UAAAA,KAAK,GAAGM,IAAI,CAACS,SAAb;AACA,cAAIf,KAAK,IAAIP,CAAb,EAAgBO,KAAK,GAAG,CAAR;AACjB;AACF;;AAEDC,MAAAA,MAAM,GAAGf,GAAG,CAAC8B,kBAAb;;AACA,UAAIf,MAAM,IAAIR,CAAd,EAAiB;AACfQ,QAAAA,MAAM,GAAGG,IAAI,CAACY,kBAAd;;AACA,YAAIf,MAAM,IAAIR,CAAd,EAAiB;AACfQ,UAAAA,MAAM,GAAGK,IAAI,CAACU,kBAAd;AACA,cAAIf,MAAM,IAAIR,CAAd,EAAiBQ,MAAM,GAAG,CAAT;AAClB;AACF;;AAED,UAAIA,MAAJ,EAAY;AACVX,QAAAA,EAAE,GAAG,CAACW,MAAN;AACAV,QAAAA,EAAE,GAAG,CAACS,KAAN;AACAN,QAAAA,EAAE,IAAIH,EAAN;AACD,OAJD,MAIO;AACLD,QAAAA,EAAE,GAAG,CAACU,KAAN;AACAT,QAAAA,EAAE,GAAG,CAACU,MAAN;AACD;;AAED,UAAIX,EAAE,GAAG,CAAL,IAAUI,EAAE,GAAG,CAAnB,EAAsB;AACpBF,QAAAA,CAAC,GAAGE,EAAE,GAAGJ,EAAL,IAAWA,EAAf;AACAM,QAAAA,IAAI,GAAGD,IAAI,CAACsB,MAAL,CAAY,CAAZ,EAAezB,CAAf,CAAP;;AACA,eAAOA,CAAC,GAAGE,EAAX,EAAeF,CAAC,IAAIF,EAApB,EAAwBM,IAAI,IAAIG,IAAI,GAAGJ,IAAI,CAACsB,MAAL,CAAYzB,CAAZ,EAAeF,EAAf,CAAf;;AACxB,YAAIC,EAAE,GAAG,CAAT,EAAYK,IAAI,IAAIG,IAAI,GAAGJ,IAAI,CAACgB,KAAL,CAAWnB,CAAX,CAAf;AACZ,YAAI,KAAKkB,CAAL,GAAS,CAAb,EAAgBd,IAAI,GAAG,MAAMA,IAAb;AACjB;AACF;;AAED,QAAIC,KAAJ,EAAW;AACTK,MAAAA,KAAK,GAAGhB,GAAG,CAACgC,sBAAZ;;AACA,UAAIhB,KAAK,IAAIT,CAAb,EAAgB;AACdS,QAAAA,KAAK,GAAGE,IAAI,CAACc,sBAAb;AACA,YAAIhB,KAAK,IAAIT,CAAb,EAAgBS,KAAK,GAAGI,IAAI,CAACY,sBAAb;AACjB;;AAED,UAAIhB,KAAJ,EAAW;AACTC,QAAAA,MAAM,GAAGjB,GAAG,CAACiC,iBAAb;;AACA,YAAIhB,MAAM,IAAIV,CAAd,EAAiB;AACfU,UAAAA,MAAM,GAAGC,IAAI,CAACe,iBAAd;;AACA,cAAIhB,MAAM,IAAIV,CAAd,EAAiB;AACfU,YAAAA,MAAM,GAAGG,IAAI,CAACa,iBAAd;AACA,gBAAIhB,MAAM,IAAIV,CAAd,EAAiBU,MAAM,GAAG,CAAT;AAClB;AACF;;AAEDA,QAAAA,MAAM,GAAG,CAACA,MAAV;;AAEA,YAAIA,MAAJ,EAAY;AACVN,UAAAA,KAAK,GAAGA,KAAK,CAACuB,OAAN,CAAc,IAAIC,MAAJ,CAAW,SAASlB,MAAT,GAAkB,MAA7B,EAAqC,GAArC,CAAd,EAAyD,OAAOD,KAAhE,CAAR;AACD;AACF;;AAED,aAAON,IAAI,GAAGE,IAAP,GAAcD,KAArB;AACD,KAzBD,MAyBO;AAEL,aAAOD,IAAP;AACD;AACF,GA5HD;;AA8HAd,EAAAA,IAAI,CAACuB,MAAL,GAAc;AACZQ,IAAAA,gBAAgB,EAAE,GADN;AAEZC,IAAAA,cAAc,EAAE,GAFJ;AAGZC,IAAAA,SAAS,EAAE,CAHC;AAIZC,IAAAA,kBAAkB,EAAE,CAJR;AAKZE,IAAAA,sBAAsB,EAAE,EALZ;AAMZC,IAAAA,iBAAiB,EAAE;AANP,GAAd;AASA,SAAOrC,IAAP;AACD;;AAED,IAAI,OAAOwC,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,CAACC,OAA5C,EAAqDD,MAAM,CAACC,OAAP,GAAiB1C,QAAjB","sourcesContent":["/*\n *  toFormat v2.0.0\n *  Adds a toFormat instance method to big.js or decimal.js\n *  Copyright (c) 2017 Michael Mclaughlin\n *  MIT Licence\n */\n\n /*\n * Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\n * a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\n */\nfunction toFormat(Ctor) {\n  'use strict';\n\n  /*\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\n   *\n   *  Example:\n   *\n   *  x = new Decimal('123456789.987654321')\n   *\n   *  // Add a format object to the constructor...\n   *  Decimal.format = {\n   *    decimalSeparator: '.',\n   *    groupSeparator: ',',\n   *    groupSize: 3,\n   *    secondaryGroupSize: 0,\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\n   *    fractionGroupSize : 0\n   *  }\n   *\n   *  x.toFormat();                // 123,456,789.987654321\n   *  x.toFormat(2, 1);            // 123,456,789.98\n   *\n   *  // And/or add a format object to the big number itself...\n   *  x.format = {\n   *    decimalSeparator: ',',\n   *    groupSeparator: '',\n   *  }\n   *\n   *  x.toFormat();                // 123456789,987654321\n   *\n   *  format = {\n   *    decimalSeparator: '.',\n   *    groupSeparator: ' ',\n   *    groupSize: 3,\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\n   *    fractionGroupSize : 5\n   *  }\n\n   *  // And/or pass a format object to the method call.\n   *  x.toFormat(format);          // 123 456 789.98765 4321\n   *  x.toFormat(4, format);       // 123 456 789.9877\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\n   *\n   *  [dp] {number} Decimal places. Integer.\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\n   *  [fmt] {Object} A format object.\n   *\n   */\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\n\n    if (!this.e && this.e !== 0) return this.toString();   // Infinity/NaN\n\n    var arr, g1, g2, i,\n      u,                             // undefined\n      nd,                            // number of integer digits\n      intd,                          // integer digits\n      intp,                          // integer part\n      fracp,                         // fraction part\n      dsep,                          // decimalSeparator\n      gsep,                          // groupSeparator\n      gsize,                         // groupSize\n      sgsize,                        // secondaryGroupSize\n      fgsep,                         // fractionGroupSeparator\n      fgsize,                        // fractionGroupSize\n      tfmt = this.format || {},\n      cfmt = this.constructor.format || {};\n\n    if (dp != u) {\n      if (typeof dp == 'object') {\n        fmt = dp;\n        dp = u;\n      } else if (rm != u) {\n        if (typeof rm == 'object') {\n          fmt = rm;\n          rm = u;\n        } else if (typeof fmt != 'object') {\n          fmt = {};\n        }\n      } else {\n        fmt = {};\n      }\n    } else {\n      fmt = {};\n    }\n\n    arr = this.toFixed(dp, rm).split('.');\n    intp = arr[0];\n    fracp = arr[1];\n    intd = this.s < 0 ? intp.slice(1) : intp;\n    nd = intd.length;\n\n    dsep = fmt.decimalSeparator;\n    if (dsep == u) {\n      dsep = tfmt.decimalSeparator;\n      if (dsep == u) {\n        dsep = cfmt.decimalSeparator;\n        if (dsep == u) dsep = '.';\n      }\n    }\n\n    gsep = fmt.groupSeparator;\n    if (gsep == u) {\n      gsep = tfmt.groupSeparator;\n      if (gsep == u) gsep = cfmt.groupSeparator;\n    }\n\n    if (gsep) {\n      gsize = fmt.groupSize;\n      if (gsize == u) {\n        gsize = tfmt.groupSize;\n        if (gsize == u) {\n          gsize = cfmt.groupSize;\n          if (gsize == u) gsize = 0;\n        }\n      }\n\n      sgsize = fmt.secondaryGroupSize;\n      if (sgsize == u) {\n        sgsize = tfmt.secondaryGroupSize;\n        if (sgsize == u) {\n          sgsize = cfmt.secondaryGroupSize;\n          if (sgsize == u) sgsize = 0;\n        }\n      }\n\n      if (sgsize) {\n        g1 = +sgsize;\n        g2 = +gsize;\n        nd -= g2;\n      } else {\n        g1 = +gsize;\n        g2 = +sgsize;\n      }\n\n      if (g1 > 0 && nd > 0) {\n        i = nd % g1 || g1;\n        intp = intd.substr(0, i);\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\n        if (g2 > 0) intp += gsep + intd.slice(i);\n        if (this.s < 0) intp = '-' + intp;\n      }\n    }\n\n    if (fracp) {\n      fgsep = fmt.fractionGroupSeparator;\n      if (fgsep == u) {\n        fgsep = tfmt.fractionGroupSeparator;\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\n      }\n\n      if (fgsep) {\n        fgsize = fmt.fractionGroupSize;\n        if (fgsize == u) {\n          fgsize = tfmt.fractionGroupSize;\n          if (fgsize == u) {\n            fgsize = cfmt.fractionGroupSize;\n            if (fgsize == u) fgsize = 0;\n          }\n        }\n\n        fgsize = +fgsize;\n\n        if (fgsize) {\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\n        }\n      }\n\n      return intp + dsep + fracp;\n    } else {\n\n      return intp;\n    }\n  };\n\n  Ctor.format = {\n    decimalSeparator: '.',\n    groupSeparator: ',',\n    groupSize: 3,\n    secondaryGroupSize: 0,\n    fractionGroupSeparator: '',\n    fractionGroupSize: 0\n  };\n\n  return Ctor;\n}\n\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;\n"]},"metadata":{},"sourceType":"script"}