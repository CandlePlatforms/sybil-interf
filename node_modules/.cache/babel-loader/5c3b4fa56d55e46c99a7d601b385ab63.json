{"ast":null,"code":"import { createReducer, nanoid } from '@reduxjs/toolkit';\nimport { addPopup, removePopup, updateBlockNumber, setOpenModal, setModalDelegatee } from './actions';\nconst initialState = {\n  blockNumber: {},\n  popupList: [],\n  openModal: null,\n  modalDelegatee: null\n};\nexport default createReducer(initialState, builder => builder.addCase(updateBlockNumber, (state, action) => {\n  const {\n    chainId,\n    blockNumber\n  } = action.payload;\n\n  if (typeof state.blockNumber[chainId] !== 'number') {\n    state.blockNumber[chainId] = blockNumber;\n  } else {\n    state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\n  }\n}).addCase(setOpenModal, (state, action) => {\n  state.openModal = action.payload;\n}).addCase(setModalDelegatee, (state, {\n  payload: {\n    delegatee\n  }\n}) => {\n  state.modalDelegatee = delegatee;\n}).addCase(addPopup, (state, {\n  payload: {\n    content,\n    key,\n    removeAfterMs = 15000\n  }\n}) => {\n  state.popupList = (key ? state.popupList.filter(popup => popup.key !== key) : state.popupList).concat([{\n    key: key || nanoid(),\n    show: true,\n    content,\n    removeAfterMs\n  }]);\n}).addCase(removePopup, (state, {\n  payload: {\n    key\n  }\n}) => {\n  state.popupList.forEach(p => {\n    if (p.key === key) {\n      p.show = false;\n    }\n  });\n}));","map":{"version":3,"sources":["/Users/safahi/Downloads/sybil-interface-candle/src/state/application/reducer.ts"],"names":["createReducer","nanoid","addPopup","removePopup","updateBlockNumber","setOpenModal","setModalDelegatee","initialState","blockNumber","popupList","openModal","modalDelegatee","builder","addCase","state","action","chainId","payload","Math","max","delegatee","content","key","removeAfterMs","filter","popup","concat","show","forEach","p"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,MAAxB,QAAsC,kBAAtC;AACA,SACEC,QADF,EAGEC,WAHF,EAIEC,iBAJF,EAMEC,YANF,EAOEC,iBAPF,QAQO,WARP;AAmBA,MAAMC,YAA8B,GAAG;AACrCC,EAAAA,WAAW,EAAE,EADwB;AAErCC,EAAAA,SAAS,EAAE,EAF0B;AAGrCC,EAAAA,SAAS,EAAE,IAH0B;AAIrCC,EAAAA,cAAc,EAAE;AAJqB,CAAvC;AAOA,eAAeX,aAAa,CAACO,YAAD,EAAgBK,OAAD,IACzCA,OAAO,CACJC,OADH,CACWT,iBADX,EAC8B,CAACU,KAAD,EAAQC,MAAR,KAAmB;AAC7C,QAAM;AAAEC,IAAAA,OAAF;AAAWR,IAAAA;AAAX,MAA2BO,MAAM,CAACE,OAAxC;;AACA,MAAI,OAAOH,KAAK,CAACN,WAAN,CAAkBQ,OAAlB,CAAP,KAAsC,QAA1C,EAAoD;AAClDF,IAAAA,KAAK,CAACN,WAAN,CAAkBQ,OAAlB,IAA6BR,WAA7B;AACD,GAFD,MAEO;AACLM,IAAAA,KAAK,CAACN,WAAN,CAAkBQ,OAAlB,IAA6BE,IAAI,CAACC,GAAL,CAASX,WAAT,EAAsBM,KAAK,CAACN,WAAN,CAAkBQ,OAAlB,CAAtB,CAA7B;AACD;AACF,CARH,EASGH,OATH,CASWR,YATX,EASyB,CAACS,KAAD,EAAQC,MAAR,KAAmB;AACxCD,EAAAA,KAAK,CAACJ,SAAN,GAAkBK,MAAM,CAACE,OAAzB;AACD,CAXH,EAYGJ,OAZH,CAYWP,iBAZX,EAY8B,CAACQ,KAAD,EAAQ;AAAEG,EAAAA,OAAO,EAAE;AAAEG,IAAAA;AAAF;AAAX,CAAR,KAAuC;AACjEN,EAAAA,KAAK,CAACH,cAAN,GAAuBS,SAAvB;AACD,CAdH,EAeGP,OAfH,CAeWX,QAfX,EAeqB,CAACY,KAAD,EAAQ;AAAEG,EAAAA,OAAO,EAAE;AAAEI,IAAAA,OAAF;AAAWC,IAAAA,GAAX;AAAgBC,IAAAA,aAAa,GAAG;AAAhC;AAAX,CAAR,KAAiE;AAClFT,EAAAA,KAAK,CAACL,SAAN,GAAkB,CAACa,GAAG,GAAGR,KAAK,CAACL,SAAN,CAAgBe,MAAhB,CAAwBC,KAAD,IAAWA,KAAK,CAACH,GAAN,KAAcA,GAAhD,CAAH,GAA0DR,KAAK,CAACL,SAApE,EAA+EiB,MAA/E,CAAsF,CACtG;AACEJ,IAAAA,GAAG,EAAEA,GAAG,IAAIrB,MAAM,EADpB;AAEE0B,IAAAA,IAAI,EAAE,IAFR;AAGEN,IAAAA,OAHF;AAIEE,IAAAA;AAJF,GADsG,CAAtF,CAAlB;AAQD,CAxBH,EAyBGV,OAzBH,CAyBWV,WAzBX,EAyBwB,CAACW,KAAD,EAAQ;AAAEG,EAAAA,OAAO,EAAE;AAAEK,IAAAA;AAAF;AAAX,CAAR,KAAiC;AACrDR,EAAAA,KAAK,CAACL,SAAN,CAAgBmB,OAAhB,CAAyBC,CAAD,IAAO;AAC7B,QAAIA,CAAC,CAACP,GAAF,KAAUA,GAAd,EAAmB;AACjBO,MAAAA,CAAC,CAACF,IAAF,GAAS,KAAT;AACD;AACF,GAJD;AAKD,CA/BH,CAD0B,CAA5B","sourcesContent":["import { createReducer, nanoid } from '@reduxjs/toolkit'\nimport {\n  addPopup,\n  PopupContent,\n  removePopup,\n  updateBlockNumber,\n  ApplicationModal,\n  setOpenModal,\n  setModalDelegatee,\n} from './actions'\n\ntype PopupList = Array<{ key: string; show: boolean; content: PopupContent; removeAfterMs: number | null }>\n\nexport interface ApplicationState {\n  readonly blockNumber: { readonly [chainId: number]: number }\n  readonly popupList: PopupList\n  readonly openModal: ApplicationModal | null\n  readonly modalDelegatee: string | null | undefined // for prefilling modal\n}\n\nconst initialState: ApplicationState = {\n  blockNumber: {},\n  popupList: [],\n  openModal: null,\n  modalDelegatee: null,\n}\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(updateBlockNumber, (state, action) => {\n      const { chainId, blockNumber } = action.payload\n      if (typeof state.blockNumber[chainId] !== 'number') {\n        state.blockNumber[chainId] = blockNumber\n      } else {\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId])\n      }\n    })\n    .addCase(setOpenModal, (state, action) => {\n      state.openModal = action.payload\n    })\n    .addCase(setModalDelegatee, (state, { payload: { delegatee } }) => {\n      state.modalDelegatee = delegatee\n    })\n    .addCase(addPopup, (state, { payload: { content, key, removeAfterMs = 15000 } }) => {\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs,\n        },\n      ])\n    })\n    .addCase(removePopup, (state, { payload: { key } }) => {\n      state.popupList.forEach((p) => {\n        if (p.key === key) {\n          p.show = false\n        }\n      })\n    })\n)\n"]},"metadata":{},"sourceType":"module"}