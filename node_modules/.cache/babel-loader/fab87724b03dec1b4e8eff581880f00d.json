{"ast":null,"code":"import gql from 'graphql-tag';\nimport { FETCHING_INTERVAL } from '../state/governance/reducer';\nexport const GLOBAL_DATA = gql`\n  query governance {\n    governances(first: 1) {\n      delegatedVotes\n      delegatedVotesRaw\n      totalTokenHolders\n      totalDelegates\n    }\n  }\n`; // fetch top delegates by votes delegated at current time\n\nexport const TOP_DELEGATES = gql`\n  query delegates {\n    delegates(first: ${FETCHING_INTERVAL}, orderBy: delegatedVotes, orderDirection: desc) {\n      id\n      delegatedVotes\n      delegatedVotesRaw\n      tokenHoldersRepresentedAmount\n      votes {\n        id\n        votes\n        support\n      }\n    }\n  }\n`; // fetch top delegates by votes delegated at current time\n\nexport const TOP_DELEGATES_OFFSET = gql`\n  query delegates($skip: Int!) {\n    delegates(first: ${FETCHING_INTERVAL}, skip: $skip, orderBy: delegatedVotes, orderDirection: desc) {\n      id\n      delegatedVotes\n      delegatedVotesRaw\n      tokenHoldersRepresentedAmount\n      votes {\n        id\n        votes\n        support\n      }\n    }\n  }\n`; // fetch top delegates by votes delegated at current time\n\nexport const DELEGATES_FROM_LIST = gql`\n  query delegates($list: [Bytes!]) {\n    delegates(first: 500, orderBy: delegatedVotes, orderDirection: desc, where: { id_in: $list }) {\n      id\n      delegatedVotes\n      delegatedVotesRaw\n      tokenHoldersRepresentedAmount\n      votes {\n        id\n        votes\n        support\n      }\n    }\n  }\n`; // all proposals\n\nexport const PROPOSALS = gql`\n  query proposals {\n    proposals(first: 100, orderBy: startBlock, orderDirection: desc) {\n      id\n      targets\n      values\n      signatures\n      status\n      calldatas\n      description\n      startBlock\n      endBlock\n      proposer {\n        id\n      }\n      forVotes: votes(first: 1000, orderBy: votesRaw, orderDirection: desc, where: { support: true }) {\n        support\n        votes\n        voter {\n          id\n        }\n      }\n      againstVotes: votes(first: 1000, orderBy: votesRaw, orderDirection: desc, where: { support: false }) {\n        support\n        votes\n        voter {\n          id\n        }\n      }\n    }\n  }\n`;\nexport const ALL_VOTERS = gql`\n  query voters($proposalID: String!, $support: Boolean!) {\n    votes(\n      first: 1000\n      where: { support: $support, proposal: $proposalID, votes_gt: 1 }\n      orderBy: votes\n      orderDirection: desc\n    ) {\n      voter {\n        id\n      }\n      votes\n    }\n  }\n`;\nexport const DELEGATE_INFO = gql`\n  query delegates($address: Bytes!) {\n    delegates(where: { id: $address }) {\n      id\n      delegatedVotes\n      delegatedVotesRaw\n      tokenHoldersRepresentedAmount\n      votes {\n        proposal {\n          id\n        }\n        support\n        votes\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/safahi/Downloads/sybil-interface-candle/src/apollo/queries.js"],"names":["gql","FETCHING_INTERVAL","GLOBAL_DATA","TOP_DELEGATES","TOP_DELEGATES_OFFSET","DELEGATES_FROM_LIST","PROPOSALS","ALL_VOTERS","DELEGATE_INFO"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AAEA,OAAO,MAAMC,WAAW,GAAGF,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATO,C,CAWP;;AACA,OAAO,MAAMG,aAAa,GAAGH,GAAI;AACjC;AACA,uBAAuBC,iBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdO,C,CAgBP;;AACA,OAAO,MAAMG,oBAAoB,GAAGJ,GAAI;AACxC;AACA,uBAAuBC,iBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdO,C,CAgBP;;AACA,OAAO,MAAMI,mBAAmB,GAAGL,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdO,C,CAgBP;;AACA,OAAO,MAAMM,SAAS,GAAGN,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA/BO;AAiCP,OAAO,MAAMO,UAAU,GAAGP,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdO;AAgBP,OAAO,MAAMQ,aAAa,GAAGR,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO","sourcesContent":["import gql from 'graphql-tag'\nimport { FETCHING_INTERVAL } from '../state/governance/reducer'\n\nexport const GLOBAL_DATA = gql`\n  query governance {\n    governances(first: 1) {\n      delegatedVotes\n      delegatedVotesRaw\n      totalTokenHolders\n      totalDelegates\n    }\n  }\n`\n\n// fetch top delegates by votes delegated at current time\nexport const TOP_DELEGATES = gql`\n  query delegates {\n    delegates(first: ${FETCHING_INTERVAL}, orderBy: delegatedVotes, orderDirection: desc) {\n      id\n      delegatedVotes\n      delegatedVotesRaw\n      tokenHoldersRepresentedAmount\n      votes {\n        id\n        votes\n        support\n      }\n    }\n  }\n`\n\n// fetch top delegates by votes delegated at current time\nexport const TOP_DELEGATES_OFFSET = gql`\n  query delegates($skip: Int!) {\n    delegates(first: ${FETCHING_INTERVAL}, skip: $skip, orderBy: delegatedVotes, orderDirection: desc) {\n      id\n      delegatedVotes\n      delegatedVotesRaw\n      tokenHoldersRepresentedAmount\n      votes {\n        id\n        votes\n        support\n      }\n    }\n  }\n`\n\n// fetch top delegates by votes delegated at current time\nexport const DELEGATES_FROM_LIST = gql`\n  query delegates($list: [Bytes!]) {\n    delegates(first: 500, orderBy: delegatedVotes, orderDirection: desc, where: { id_in: $list }) {\n      id\n      delegatedVotes\n      delegatedVotesRaw\n      tokenHoldersRepresentedAmount\n      votes {\n        id\n        votes\n        support\n      }\n    }\n  }\n`\n\n// all proposals\nexport const PROPOSALS = gql`\n  query proposals {\n    proposals(first: 100, orderBy: startBlock, orderDirection: desc) {\n      id\n      targets\n      values\n      signatures\n      status\n      calldatas\n      description\n      startBlock\n      endBlock\n      proposer {\n        id\n      }\n      forVotes: votes(first: 1000, orderBy: votesRaw, orderDirection: desc, where: { support: true }) {\n        support\n        votes\n        voter {\n          id\n        }\n      }\n      againstVotes: votes(first: 1000, orderBy: votesRaw, orderDirection: desc, where: { support: false }) {\n        support\n        votes\n        voter {\n          id\n        }\n      }\n    }\n  }\n`\n\nexport const ALL_VOTERS = gql`\n  query voters($proposalID: String!, $support: Boolean!) {\n    votes(\n      first: 1000\n      where: { support: $support, proposal: $proposalID, votes_gt: 1 }\n      orderBy: votes\n      orderDirection: desc\n    ) {\n      voter {\n        id\n      }\n      votes\n    }\n  }\n`\n\nexport const DELEGATE_INFO = gql`\n  query delegates($address: Bytes!) {\n    delegates(where: { id: $address }) {\n      id\n      delegatedVotes\n      delegatedVotesRaw\n      tokenHoldersRepresentedAmount\n      votes {\n        proposal {\n          id\n        }\n        support\n        votes\n      }\n    }\n  }\n`\n"]},"metadata":{},"sourceType":"module"}