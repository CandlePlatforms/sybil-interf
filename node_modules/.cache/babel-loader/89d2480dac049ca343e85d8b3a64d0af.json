{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Documents/GitHub/sybil-interf/src/components/twitter/TwitterFlow.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { AutoColumn } from '../Column';\nimport { ButtonPrimary } from '../Button';\nimport { TYPE, CloseIcon, BackArrowSimple } from '../../theme';\nimport { useActiveWeb3React } from '../../hooks';\nimport { RowBetween, RowFixed } from '../Row';\nimport styled from 'styled-components';\nimport { useVerifyCallback, useAllVerifiedHandles, useTweetWatcher, useAllIdentities } from '../../state/social/hooks';\nimport { Tweet } from 'react-twitter-widgets';\nimport { Dots } from '../../theme/components';\nimport { useTwitterAccount } from '../../state/user/hooks';\nimport { useActiveProtocol } from '../../state/governance/hooks';\nimport TwitterAccountPreview from '../../components/twitter/TwitterAccountPreview';\nimport TwitterLoginButton from './TwitterLoginButton';\nimport { OffChainRequestModal } from '../TransactionConfirmationModal';\nimport { useSignedHandle } from '../../hooks/useSignedHandle';\nimport { fetchLatestTweet } from '../../data/social';\nimport { CONNECT_CONFIG } from 'state/governance/reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModalContentWrapper = styled.div`\n  padding: 2rem;\n  width: 100%;\n  overflow-y: scroll;\n`;\n_c = ModalContentWrapper;\nconst TweetWrapper = styled.div`\n  padding: 1rem;\n  color: ${({\n  theme\n}) => theme.blue1};\n  background: #f2f2f2;\n  word-break: break-word;\n`;\n_c2 = TweetWrapper;\nexport default function TwitterFlow({\n  onDismiss\n}) {\n  _s();\n\n  var _activeProtocol$token, _activeProtocol$emoji, _activeProtocol$token2;\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const [activeProtocol] = useActiveProtocol(); // monitor user inputs\n\n  const [twitterHandle] = useTwitterAccount();\n  const [tweetID, setTweetID] = useState(); // update verified handles if succesful verification\n\n  const verifiedHandles = useAllVerifiedHandles();\n  const [allIndentities, setAllIdentities] = useAllIdentities(); // monitor if user has signed message, reset if back arrow clicked\n\n  const {\n    sig,\n    signMessage,\n    setSig,\n    error: sigError\n  } = useSignedHandle(twitterHandle); // monitor verification attempt\n\n  const {\n    verifyCallback\n  } = useVerifyCallback(tweetID);\n  const [attempting, setAttempting] = useState(false);\n  const [verified, setVerified] = useState(false);\n  const [requestError, setRequestError] = useState();\n\n  async function onVerify() {\n    //reset error and loading state\n    setAttempting(true);\n    setRequestError(undefined); // if callback not returned properly ignore\n\n    if (!verifyCallback || !account || !tweetID) return;\n    const res = await verifyCallback(); // if error, display for user, if not update verified handle\n\n    if (res.error || !res.success) {\n      setRequestError(res.error);\n      setAttempting(false);\n    } else if (res.success && twitterHandle) {\n      const newVerified = {}; // new copy of verified list\n\n      verifiedHandles && allIndentities && Object.keys(verifiedHandles).map(address => {\n        newVerified[address] = allIndentities[address];\n        return true;\n      }); // reset global list of verified handles to account for new entry\n\n      if (newVerified && allIndentities) {\n        newVerified[account] = { ...allIndentities[account],\n          twitter: {\n            handle: twitterHandle,\n            timestamp: Date.now()\n          }\n        };\n        setAllIdentities(newVerified);\n      }\n\n      setVerified(true);\n    }\n  } // tweet data\n\n\n  const tweetCopyForLink = `${(activeProtocol === null || activeProtocol === void 0 ? void 0 : activeProtocol.emoji) ? `${activeProtocol === null || activeProtocol === void 0 ? void 0 : activeProtocol.emoji} ` : ''}Verifying myself as a ${activeProtocol === null || activeProtocol === void 0 ? void 0 : activeProtocol.social} ${(activeProtocol === null || activeProtocol === void 0 ? void 0 : activeProtocol.id) == CONNECT_CONFIG.id ? 'user' : `%23${activeProtocol === null || activeProtocol === void 0 ? void 0 : (_activeProtocol$token = activeProtocol.token) === null || _activeProtocol$token === void 0 ? void 0 : _activeProtocol$token.symbol}Delegate`} on Sybil🏛️%0A%0Asybil.org%2F%23%2Fdelegates/${activeProtocol === null || activeProtocol === void 0 ? void 0 : activeProtocol.id}/${account}%0A%0Aaddr:${account}%0A%0Asig:${sig !== null && sig !== void 0 ? sig : ''}`; // used just for display in UI\n\n  const readableTweetCopy = `${(_activeProtocol$emoji = activeProtocol === null || activeProtocol === void 0 ? void 0 : activeProtocol.emoji) !== null && _activeProtocol$emoji !== void 0 ? _activeProtocol$emoji : ''}Verifying myself as a ${activeProtocol === null || activeProtocol === void 0 ? void 0 : activeProtocol.social} ${(activeProtocol === null || activeProtocol === void 0 ? void 0 : activeProtocol.id) == CONNECT_CONFIG.id ? 'user' : `%23${activeProtocol === null || activeProtocol === void 0 ? void 0 : (_activeProtocol$token2 = activeProtocol.token) === null || _activeProtocol$token2 === void 0 ? void 0 : _activeProtocol$token2.symbol}Delegate`} on Sybil🏛\\n sybil.org/#/delegates/${activeProtocol === null || activeProtocol === void 0 ? void 0 : activeProtocol.id}/${account} \\n addr:${account} \\n sig:${sig !== null && sig !== void 0 ? sig : ''}`; // watch for user tweet\n\n  const [tweetError, setTweetError] = useState();\n  const [watch, setWatch] = useState(false); // use hook to handle polling\n\n  useTweetWatcher(sig, twitterHandle, watch, setWatch, setTweetID, setTweetError);\n\n  function startWatching() {\n    setWatch(true); // restart watcher\n\n    setTweetError(undefined); // reset error\n\n    window.open(`https://twitter.com/intent/tweet?text=${tweetCopyForLink}`, 'tweetWindow', 'height=400,width=800,top=400px,left=400px');\n  } // start watching and open window\n\n\n  function checkForTweet() {\n    twitterHandle && fetchLatestTweet(twitterHandle).then(res => {\n      if (res === null || res === void 0 ? void 0 : res.data[0]) {\n        var _res$data;\n\n        const tweetData = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data[0]; // check that tweet contains correct data\n\n        const passedRegex = tweetData.text.includes('sig:' + sig);\n\n        if (passedRegex) {\n          setTweetID(tweetData.id);\n          setTweetError(undefined);\n          setWatch(false);\n        } else {\n          startWatching();\n        }\n      } else {\n        startWatching();\n      }\n    }).catch(() => {\n      startWatching();\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(ModalContentWrapper, {\n    children: !twitterHandle ? /*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n          children: /*#__PURE__*/_jsxDEV(TYPE.mediumHeader, {\n            ml: \"6px\",\n            children: \"Connect Twitter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n          onClick: onDismiss\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TYPE.black, {\n        children: \"Sign in with Twitter to link your Ethereum address and Twitter handle.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TwitterAccountPreview, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TwitterLoginButton, {\n        text: \"Connect Twitter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this) : !sig ? /*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n          children: /*#__PURE__*/_jsxDEV(TYPE.mediumHeader, {\n            ml: \"6px\",\n            children: \"Step 1: Sign Message\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n          onClick: onDismiss\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TYPE.black, {\n        children: \"Sign and tweet a message that will be used to link your wallet address and Twitter handle.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TwitterAccountPreview, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n        onClick: signMessage,\n        children: \"Sign\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }, this), sigError && /*#__PURE__*/_jsxDEV(TYPE.error, {\n        error: true,\n        children: sigError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this) : !tweetID ? /*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n          children: [/*#__PURE__*/_jsxDEV(BackArrowSimple, {\n            onClick: () => setSig(undefined)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TYPE.mediumHeader, {\n            ml: \"6px\",\n            children: \"Step 2: Announce\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n          onClick: onDismiss\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TwitterAccountPreview, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TweetWrapper, {\n        children: readableTweetCopy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n        onClick: checkForTweet,\n        children: watch ? /*#__PURE__*/_jsxDEV(Dots, {\n          children: \"Looking for tweet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 22\n        }, this) : tweetError ? 'Check again' : 'Tweet This'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), tweetError && /*#__PURE__*/_jsxDEV(TYPE.error, {\n        error: true,\n        children: tweetError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this) : !verified && !attempting ? /*#__PURE__*/_jsxDEV(AutoColumn, {\n      gap: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(RowFixed, {\n          children: [/*#__PURE__*/_jsxDEV(BackArrowSimple, {\n            onClick: () => {\n              setTweetID(undefined);\n              setRequestError(undefined);\n              setWatch(false);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TYPE.mediumHeader, {\n            ml: \"6px\",\n            children: \"Step 3: Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n          onClick: onDismiss\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TwitterAccountPreview, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Tweet, {\n        tweetId: tweetID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(TYPE.black, {\n        children: \"Verify your tweet and add your handle to the list of verified mappings.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n        onClick: onVerify,\n        disabled: !account || !tweetID || !sig,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this), requestError && /*#__PURE__*/_jsxDEV(TYPE.error, {\n        error: true,\n        children: requestError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(OffChainRequestModal, {\n      onDismiss: onDismiss,\n      success: verified\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TwitterFlow, \"WmpQncxzylmrGHpaJGmLHfPr5t8=\", false, function () {\n  return [useActiveWeb3React, useActiveProtocol, useTwitterAccount, useAllVerifiedHandles, useAllIdentities, useSignedHandle, useVerifyCallback, useTweetWatcher];\n});\n\n_c3 = TwitterFlow;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ModalContentWrapper\");\n$RefreshReg$(_c2, \"TweetWrapper\");\n$RefreshReg$(_c3, \"TwitterFlow\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/sybil-interf/src/components/twitter/TwitterFlow.tsx"],"names":["React","useState","AutoColumn","ButtonPrimary","TYPE","CloseIcon","BackArrowSimple","useActiveWeb3React","RowBetween","RowFixed","styled","useVerifyCallback","useAllVerifiedHandles","useTweetWatcher","useAllIdentities","Tweet","Dots","useTwitterAccount","useActiveProtocol","TwitterAccountPreview","TwitterLoginButton","OffChainRequestModal","useSignedHandle","fetchLatestTweet","CONNECT_CONFIG","ModalContentWrapper","div","TweetWrapper","theme","blue1","TwitterFlow","onDismiss","account","activeProtocol","twitterHandle","tweetID","setTweetID","verifiedHandles","allIndentities","setAllIdentities","sig","signMessage","setSig","error","sigError","verifyCallback","attempting","setAttempting","verified","setVerified","requestError","setRequestError","onVerify","undefined","res","success","newVerified","Object","keys","map","address","twitter","handle","timestamp","Date","now","tweetCopyForLink","emoji","social","id","token","symbol","readableTweetCopy","tweetError","setTweetError","watch","setWatch","startWatching","window","open","checkForTweet","then","data","tweetData","passedRegex","text","includes","catch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { AutoColumn } from '../Column'\nimport { ButtonPrimary } from '../Button'\nimport { TYPE, CloseIcon, BackArrowSimple } from '../../theme'\nimport { useActiveWeb3React } from '../../hooks'\n\nimport { RowBetween, RowFixed } from '../Row'\nimport styled from 'styled-components'\nimport { useVerifyCallback, useAllVerifiedHandles, useTweetWatcher, useAllIdentities } from '../../state/social/hooks'\nimport { Tweet } from 'react-twitter-widgets'\nimport { Dots } from '../../theme/components'\nimport { useTwitterAccount } from '../../state/user/hooks'\nimport { useActiveProtocol } from '../../state/governance/hooks'\nimport TwitterAccountPreview from '../../components/twitter/TwitterAccountPreview'\nimport TwitterLoginButton from './TwitterLoginButton'\nimport { OffChainRequestModal } from '../TransactionConfirmationModal'\nimport { useSignedHandle } from '../../hooks/useSignedHandle'\nimport { fetchLatestTweet, LatestTweetResponse } from '../../data/social'\nimport { Identities } from '../../state/social/reducer'\nimport { CONNECT_CONFIG } from 'state/governance/reducer'\n\nconst ModalContentWrapper = styled.div`\n  padding: 2rem;\n  width: 100%;\n  overflow-y: scroll;\n`\n\nconst TweetWrapper = styled.div`\n  padding: 1rem;\n  color: ${({ theme }) => theme.blue1};\n  background: #f2f2f2;\n  word-break: break-word;\n`\n\nexport default function TwitterFlow({ onDismiss }: { onDismiss: () => void }) {\n  const { account } = useActiveWeb3React()\n  const [activeProtocol] = useActiveProtocol()\n\n  // monitor user inputs\n  const [twitterHandle] = useTwitterAccount()\n  const [tweetID, setTweetID] = useState<undefined | string>()\n\n  // update verified handles if succesful verification\n  const verifiedHandles = useAllVerifiedHandles()\n  const [allIndentities, setAllIdentities] = useAllIdentities()\n\n  // monitor if user has signed message, reset if back arrow clicked\n  const { sig, signMessage, setSig, error: sigError } = useSignedHandle(twitterHandle)\n\n  // monitor verification attempt\n  const { verifyCallback } = useVerifyCallback(tweetID)\n  const [attempting, setAttempting] = useState(false)\n  const [verified, setVerified] = useState(false)\n  const [requestError, setRequestError] = useState<string | undefined>()\n\n  async function onVerify() {\n    //reset error and loading state\n    setAttempting(true)\n    setRequestError(undefined)\n\n    // if callback not returned properly ignore\n    if (!verifyCallback || !account || !tweetID) return\n\n    const res = await verifyCallback()\n\n    // if error, display for user, if not update verified handle\n    if (res.error || !res.success) {\n      setRequestError(res.error)\n      setAttempting(false)\n    } else if (res.success && twitterHandle) {\n      const newVerified: Identities = {}\n      // new copy of verified list\n      verifiedHandles &&\n        allIndentities &&\n        Object.keys(verifiedHandles).map((address) => {\n          newVerified[address] = allIndentities[address]\n          return true\n        })\n      // reset global list of verified handles to account for new entry\n      if (newVerified && allIndentities) {\n        newVerified[account] = {\n          ...allIndentities[account],\n          twitter: {\n            handle: twitterHandle,\n            timestamp: Date.now(),\n          },\n        }\n        setAllIdentities(newVerified)\n      }\n      setVerified(true)\n    }\n  }\n\n  // tweet data\n  const tweetCopyForLink = `${activeProtocol?.emoji ? `${activeProtocol?.emoji} ` : ''}Verifying myself as a ${\n    activeProtocol?.social\n  } ${\n    activeProtocol?.id == CONNECT_CONFIG.id ? 'user' : `%23${activeProtocol?.token?.symbol}Delegate`\n  } on Sybil🏛️%0A%0Asybil.org%2F%23%2Fdelegates/${activeProtocol?.id}/${account}%0A%0Aaddr:${account}%0A%0Asig:${\n    sig ?? ''\n  }`\n\n  // used just for display in UI\n  const readableTweetCopy = `${activeProtocol?.emoji ?? ''}Verifying myself as a ${activeProtocol?.social} ${\n    activeProtocol?.id == CONNECT_CONFIG.id ? 'user' : `%23${activeProtocol?.token?.symbol}Delegate`\n  } on Sybil🏛\\n sybil.org/#/delegates/${activeProtocol?.id}/${account} \\n addr:${account} \\n sig:${sig ?? ''}`\n\n  // watch for user tweet\n  const [tweetError, setTweetError] = useState<string | undefined>()\n  const [watch, setWatch] = useState<boolean>(false)\n\n  // use hook to handle polling\n  useTweetWatcher(sig, twitterHandle, watch, setWatch, setTweetID, setTweetError)\n\n  function startWatching() {\n    setWatch(true) // restart watcher\n    setTweetError(undefined) // reset error\n    window.open(\n      `https://twitter.com/intent/tweet?text=${tweetCopyForLink}`,\n      'tweetWindow',\n      'height=400,width=800,top=400px,left=400px'\n    )\n  }\n\n  // start watching and open window\n  function checkForTweet() {\n    twitterHandle &&\n      fetchLatestTweet(twitterHandle)\n        .then((res: LatestTweetResponse | null) => {\n          if (res?.data[0]) {\n            const tweetData = res?.data?.[0]\n            // check that tweet contains correct data\n            const passedRegex = tweetData.text.includes('sig:' + sig)\n            if (passedRegex) {\n              setTweetID(tweetData.id)\n              setTweetError(undefined)\n              setWatch(false)\n            } else {\n              startWatching()\n            }\n          } else {\n            startWatching()\n          }\n        })\n        .catch(() => {\n          startWatching()\n        })\n  }\n\n  return (\n    <ModalContentWrapper>\n      {!twitterHandle ? (\n        <AutoColumn gap=\"lg\">\n          <RowBetween>\n            <RowFixed>\n              <TYPE.mediumHeader ml=\"6px\">Connect Twitter</TYPE.mediumHeader>\n            </RowFixed>\n            <CloseIcon onClick={onDismiss} />\n          </RowBetween>\n          <TYPE.black>Sign in with Twitter to link your Ethereum address and Twitter handle.</TYPE.black>\n          <TwitterAccountPreview />\n          <TwitterLoginButton text=\"Connect Twitter\" />\n        </AutoColumn>\n      ) : !sig ? (\n        <AutoColumn gap=\"lg\">\n          <RowBetween>\n            <RowFixed>\n              <TYPE.mediumHeader ml=\"6px\">Step 1: Sign Message</TYPE.mediumHeader>\n            </RowFixed>\n            <CloseIcon onClick={onDismiss} />\n          </RowBetween>\n          <TYPE.black>\n            Sign and tweet a message that will be used to link your wallet address and Twitter handle.\n          </TYPE.black>\n          <TwitterAccountPreview />\n          <ButtonPrimary onClick={signMessage}>Sign</ButtonPrimary>\n          {sigError && <TYPE.error error={true}>{sigError}</TYPE.error>}\n        </AutoColumn>\n      ) : !tweetID ? (\n        <AutoColumn gap=\"lg\">\n          <RowBetween>\n            <RowFixed>\n              <BackArrowSimple onClick={() => setSig(undefined)} />\n              <TYPE.mediumHeader ml=\"6px\">Step 2: Announce</TYPE.mediumHeader>\n            </RowFixed>\n            <CloseIcon onClick={onDismiss} />\n          </RowBetween>\n          <TwitterAccountPreview />\n          <TweetWrapper>{readableTweetCopy}</TweetWrapper>\n          <ButtonPrimary onClick={checkForTweet}>\n            {watch ? <Dots>Looking for tweet</Dots> : tweetError ? 'Check again' : 'Tweet This'}\n          </ButtonPrimary>\n          {tweetError && <TYPE.error error={true}>{tweetError}</TYPE.error>}\n        </AutoColumn>\n      ) : !verified && !attempting ? (\n        <AutoColumn gap=\"lg\">\n          <RowBetween>\n            <RowFixed>\n              <BackArrowSimple\n                onClick={() => {\n                  setTweetID(undefined)\n                  setRequestError(undefined)\n                  setWatch(false)\n                }}\n              />\n              <TYPE.mediumHeader ml=\"6px\">Step 3: Submit</TYPE.mediumHeader>\n            </RowFixed>\n            <CloseIcon onClick={onDismiss} />\n          </RowBetween>\n          <TwitterAccountPreview />\n          <Tweet tweetId={tweetID} />\n          <TYPE.black>Verify your tweet and add your handle to the list of verified mappings.</TYPE.black>\n          <ButtonPrimary onClick={onVerify} disabled={!account || !tweetID || !sig}>\n            Submit\n          </ButtonPrimary>\n          {requestError && <TYPE.error error={true}>{requestError}</TYPE.error>}\n        </AutoColumn>\n      ) : (\n        <OffChainRequestModal onDismiss={onDismiss} success={verified} />\n      )}\n    </ModalContentWrapper>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}