{"ast":null,"code":"// Endpoints\nexport const VERIFICATION_WORKER_URL = 'https://sybil-verifier.uniswap.workers.dev';\nconst VERIFIED_JSON = 'https://api.github.com/repos/uniswap/sybil-list/contents/verified.json';\nexport const TWITTER_WORKER_URL = 'https://twitter-worker.uniswap.workers.dev';\nexport async function fetchAllIdentities() {\n  try {\n    return fetch(VERIFIED_JSON).then(async res => {\n      if (!res || res.status !== 200) {\n        return Promise.reject('Unable to fetch verified handles');\n      } else {\n        return res.json().then(data => {\n          const content = data.content;\n          const decodedContent = atob(content);\n          const parsed = JSON.parse(decodedContent);\n          return parsed;\n        }).catch(() => {\n          return Promise.reject('Error fetch verified handle data');\n        });\n      }\n    }).catch(() => {\n      return undefined;\n    });\n  } catch (e) {\n    return Promise.reject('Error fetch verified handle data');\n  }\n} //https://example.com/api?berify?account=0xCe1712Bb45C1D8CdAFFa1F242Bc0bc79F8D1352C&id=1329517739363463168\n\nconst PROFILE_DATA_PROMISES = {};\nexport function fetchProfileData(handle) {\n  const key = `${handle}`;\n  const url = `${TWITTER_WORKER_URL}/user?handle=${handle}`;\n\n  try {\n    var _PROFILE_DATA_PROMISE;\n\n    return PROFILE_DATA_PROMISES[key] = (_PROFILE_DATA_PROMISE = PROFILE_DATA_PROMISES[key]) !== null && _PROFILE_DATA_PROMISE !== void 0 ? _PROFILE_DATA_PROMISE : fetch(url).then(async res => {\n      if (res.status === 200) {\n        return res.json();\n      } else {\n        Promise.reject('No handle found');\n        return null;\n      }\n    }).catch(error => {\n      return Promise.reject(error);\n    });\n  } catch {\n    return Promise.reject('Error: fetching profile data');\n  }\n}\n// dont save responses as user may need to tweet multiple times\nexport async function fetchLatestTweet(handle) {\n  const url = `${TWITTER_WORKER_URL}/latest-tweet?handle=` + handle;\n\n  try {\n    return fetch(url).then(async res => {\n      if (res.status === 200) {\n        return res.json();\n      } else {\n        return Promise.reject('Error fetching latest tweet');\n      }\n    });\n  } catch (error) {\n    return Promise.reject('Error fetching latest tweet');\n  }\n}","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/sybil-interf/src/data/social.ts"],"names":["VERIFICATION_WORKER_URL","VERIFIED_JSON","TWITTER_WORKER_URL","fetchAllIdentities","fetch","then","res","status","Promise","reject","json","data","content","decodedContent","atob","parsed","JSON","parse","catch","undefined","e","PROFILE_DATA_PROMISES","fetchProfileData","handle","key","url","error","fetchLatestTweet"],"mappings":"AACA;AACA,OAAO,MAAMA,uBAAuB,GAAG,4CAAhC;AACP,MAAMC,aAAa,GAAG,wEAAtB;AACA,OAAO,MAAMC,kBAAkB,GAAG,4CAA3B;AAEP,OAAO,eAAeC,kBAAf,GAAqE;AAC1E,MAAI;AACF,WAAOC,KAAK,CAACH,aAAD,CAAL,CACJI,IADI,CACC,MAAOC,GAAP,IAAe;AACnB,UAAI,CAACA,GAAD,IAAQA,GAAG,CAACC,MAAJ,KAAe,GAA3B,EAAgC;AAC9B,eAAOC,OAAO,CAACC,MAAR,CAAe,kCAAf,CAAP;AACD,OAFD,MAEO;AACL,eAAOH,GAAG,CACPI,IADI,GAEJL,IAFI,CAEEM,IAAD,IAAU;AACd,gBAAMC,OAAO,GAAGD,IAAI,CAACC,OAArB;AACA,gBAAMC,cAAc,GAAGC,IAAI,CAACF,OAAD,CAA3B;AACA,gBAAMG,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,cAAX,CAAf;AACA,iBAAOE,MAAP;AACD,SAPI,EAQJG,KARI,CAQE,MAAM;AACX,iBAAOV,OAAO,CAACC,MAAR,CAAe,kCAAf,CAAP;AACD,SAVI,CAAP;AAWD;AACF,KAjBI,EAkBJS,KAlBI,CAkBE,MAAM;AACX,aAAOC,SAAP;AACD,KApBI,CAAP;AAqBD,GAtBD,CAsBE,OAAOC,CAAP,EAAU;AACV,WAAOZ,OAAO,CAACC,MAAR,CAAe,kCAAf,CAAP;AACD;AACF,C,CAED;;AAUA,MAAMY,qBAA6E,GAAG,EAAtF;AAEA,OAAO,SAASC,gBAAT,CAA0BC,MAA1B,EAA+E;AACpF,QAAMC,GAAG,GAAI,GAAED,MAAO,EAAtB;AACA,QAAME,GAAG,GAAI,GAAEvB,kBAAmB,gBAAeqB,MAAO,EAAxD;;AACA,MAAI;AAAA;;AACF,WAAQF,qBAAqB,CAACG,GAAD,CAArB,4BACNH,qBAAqB,CAACG,GAAD,CADf,yEAENpB,KAAK,CAACqB,GAAD,CAAL,CACGpB,IADH,CACQ,MAAOC,GAAP,IAAe;AACnB,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,eAAOD,GAAG,CAACI,IAAJ,EAAP;AACD,OAFD,MAEO;AACLF,QAAAA,OAAO,CAACC,MAAR,CAAe,iBAAf;AACA,eAAO,IAAP;AACD;AACF,KARH,EASGS,KATH,CASUQ,KAAD,IAAW;AAChB,aAAOlB,OAAO,CAACC,MAAR,CAAeiB,KAAf,CAAP;AACD,KAXH,CAFF;AAcD,GAfD,CAeE,MAAM;AACN,WAAOlB,OAAO,CAACC,MAAR,CAAe,8BAAf,CAAP;AACD;AACF;AAWD;AACA,OAAO,eAAekB,gBAAf,CAAgCJ,MAAhC,EAAqF;AAC1F,QAAME,GAAG,GAAI,GAAEvB,kBAAmB,uBAAtB,GAA+CqB,MAA3D;;AACA,MAAI;AACF,WAAOnB,KAAK,CAACqB,GAAD,CAAL,CAAWpB,IAAX,CAAgB,MAAOC,GAAP,IAAe;AACpC,UAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,eAAOD,GAAG,CAACI,IAAJ,EAAP;AACD,OAFD,MAEO;AACL,eAAOF,OAAO,CAACC,MAAR,CAAe,6BAAf,CAAP;AACD;AACF,KANM,CAAP;AAOD,GARD,CAQE,OAAOiB,KAAP,EAAc;AACd,WAAOlB,OAAO,CAACC,MAAR,CAAe,6BAAf,CAAP;AACD;AACF","sourcesContent":["import { Identities } from './../state/social/reducer'\n// Endpoints\nexport const VERIFICATION_WORKER_URL = 'https://sybil-verifier.uniswap.workers.dev'\nconst VERIFIED_JSON = 'https://api.github.com/repos/uniswap/sybil-list/contents/verified.json'\nexport const TWITTER_WORKER_URL = 'https://twitter-worker.uniswap.workers.dev'\n\nexport async function fetchAllIdentities(): Promise<Identities | undefined> {\n  try {\n    return fetch(VERIFIED_JSON)\n      .then(async (res) => {\n        if (!res || res.status !== 200) {\n          return Promise.reject('Unable to fetch verified handles')\n        } else {\n          return res\n            .json()\n            .then((data) => {\n              const content = data.content\n              const decodedContent = atob(content)\n              const parsed = JSON.parse(decodedContent)\n              return parsed\n            })\n            .catch(() => {\n              return Promise.reject('Error fetch verified handle data')\n            })\n        }\n      })\n      .catch(() => {\n        return undefined\n      })\n  } catch (e) {\n    return Promise.reject('Error fetch verified handle data')\n  }\n}\n\n//https://example.com/api?berify?account=0xCe1712Bb45C1D8CdAFFa1F242Bc0bc79F8D1352C&id=1329517739363463168\n\nexport interface ProfileDataResponse {\n  data: {\n    id: number\n    name: string\n    username: string\n    profile_image_url: string\n  }\n}\nconst PROFILE_DATA_PROMISES: { [key: string]: Promise<ProfileDataResponse | null> } = {}\n\nexport function fetchProfileData(handle: string): Promise<ProfileDataResponse | null> {\n  const key = `${handle}`\n  const url = `${TWITTER_WORKER_URL}/user?handle=${handle}`\n  try {\n    return (PROFILE_DATA_PROMISES[key] =\n      PROFILE_DATA_PROMISES[key] ??\n      fetch(url)\n        .then(async (res) => {\n          if (res.status === 200) {\n            return res.json()\n          } else {\n            Promise.reject('No handle found')\n            return null\n          }\n        })\n        .catch((error) => {\n          return Promise.reject(error)\n        }))\n  } catch {\n    return Promise.reject('Error: fetching profile data')\n  }\n}\n\nexport interface LatestTweetResponse {\n  data: [\n    {\n      id: string\n      text: string\n    }\n  ]\n}\n\n// dont save responses as user may need to tweet multiple times\nexport async function fetchLatestTweet(handle: string): Promise<LatestTweetResponse | null> {\n  const url = `${TWITTER_WORKER_URL}/latest-tweet?handle=` + handle\n  try {\n    return fetch(url).then(async (res) => {\n      if (res.status === 200) {\n        return res.json()\n      } else {\n        return Promise.reject('Error fetching latest tweet')\n      }\n    })\n  } catch (error) {\n    return Promise.reject('Error fetching latest tweet')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}