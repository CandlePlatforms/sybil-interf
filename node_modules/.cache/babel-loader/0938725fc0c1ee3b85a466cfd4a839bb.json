{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { useActiveWeb3React } from '.'; // sign handle based on data format from EIP-712\n// based on twitter handle, return signature and message signing function\n// return setter function to reset signature if needed\n\nexport function useSignedHandle(twitterHandle) {\n  _s();\n\n  // get signer and account to sign data with\n  const {\n    library,\n    account\n  } = useActiveWeb3React(); // store and set signature\n\n  const [sig, setSig] = useState(); // mark errors\n\n  const [error, setError] = useState();\n  const signMessage = useCallback(() => {\n    // reset error\n    setError(undefined);\n\n    if (!library && account) {\n      return;\n    }\n\n    const EIP712Domain = [{\n      name: 'name',\n      type: 'string'\n    }, {\n      name: 'version',\n      type: 'string'\n    }];\n    const domain = {\n      name: 'Sybil Verifier',\n      version: '1'\n    };\n    const Permit = [{\n      name: 'username',\n      type: 'string'\n    }];\n    const message = {\n      username: twitterHandle\n    };\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit\n      },\n      domain,\n      primaryType: 'Permit',\n      message\n    });\n    /**\n     * Need to use personal_sign as eth typed data is not\n     * supported by most hardware wallets yet.\n     */\n\n    if (account) {\n      //format as hex\n      const message = new Buffer(data).toString('hex'); // need to manually prefix with 0x for wallet connect\n\n      library === null || library === void 0 ? void 0 : library.send('personal_sign', ['0x' + message, account]).catch(error => {\n        console.log(error);\n        setError('Error signing message');\n      }).then(sig => {\n        setSig(sig);\n      });\n    }\n  }, [account, library, twitterHandle]);\n  return {\n    sig,\n    signMessage,\n    setSig,\n    error\n  };\n}\n\n_s(useSignedHandle, \"fYaMAL4+kPHQhdVz+JPA862kkQo=\", false, function () {\n  return [useActiveWeb3React];\n});","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/sybil-interf/src/hooks/useSignedHandle.ts"],"names":["useState","useCallback","useActiveWeb3React","useSignedHandle","twitterHandle","library","account","sig","setSig","error","setError","signMessage","undefined","EIP712Domain","name","type","domain","version","Permit","message","username","data","JSON","stringify","types","primaryType","Buffer","toString","send","catch","console","log","then"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAgE,OAAhE;AACA,SAASC,kBAAT,QAAmC,GAAnC,C,CAEA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,aAAzB,EAKL;AAAA;;AACA;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBJ,kBAAkB,EAA/C,CAFA,CAIA;;AACA,QAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBR,QAAQ,EAA9B,CALA,CAOA;;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,EAAlC;AAEA,QAAMW,WAAW,GAAGV,WAAW,CAAC,MAAM;AACpC;AACAS,IAAAA,QAAQ,CAACE,SAAD,CAAR;;AAEA,QAAI,CAACP,OAAD,IAAYC,OAAhB,EAAyB;AACvB;AACD;;AACD,UAAMO,YAAY,GAAG,CACnB;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBC,MAAAA,IAAI,EAAE;AAAtB,KADmB,EAEnB;AAAED,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,IAAI,EAAE;AAAzB,KAFmB,CAArB;AAIA,UAAMC,MAAM,GAAG;AACbF,MAAAA,IAAI,EAAE,gBADO;AAEbG,MAAAA,OAAO,EAAE;AAFI,KAAf;AAIA,UAAMC,MAAM,GAAG,CAAC;AAAEJ,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,IAAI,EAAE;AAA1B,KAAD,CAAf;AACA,UAAMI,OAAO,GAAG;AAAEC,MAAAA,QAAQ,EAAEhB;AAAZ,KAAhB;AACA,UAAMiB,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAC1BC,MAAAA,KAAK,EAAE;AACLX,QAAAA,YADK;AAELK,QAAAA;AAFK,OADmB;AAK1BF,MAAAA,MAL0B;AAM1BS,MAAAA,WAAW,EAAE,QANa;AAO1BN,MAAAA;AAP0B,KAAf,CAAb;AAUA;AACJ;AACA;AACA;;AACI,QAAIb,OAAJ,EAAa;AACX;AACA,YAAMa,OAAO,GAAG,IAAIO,MAAJ,CAAWL,IAAX,EAAiBM,QAAjB,CAA0B,KAA1B,CAAhB,CAFW,CAIX;;AACAtB,MAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CACHuB,IADJ,CACS,eADT,EAC0B,CAAC,OAAOT,OAAR,EAAiBb,OAAjB,CAD1B,EAEGuB,KAFH,CAEUpB,KAAD,IAAW;AAChBqB,QAAAA,OAAO,CAACC,GAAR,CAAYtB,KAAZ;AACAC,QAAAA,QAAQ,CAAC,uBAAD,CAAR;AACD,OALH,EAMGsB,IANH,CAMSzB,GAAD,IAAS;AACbC,QAAAA,MAAM,CAACD,GAAD,CAAN;AACD,OARH;AASD;AACF,GA9C8B,EA8C5B,CAACD,OAAD,EAAUD,OAAV,EAAmBD,aAAnB,CA9C4B,CAA/B;AAgDA,SAAO;AAAEG,IAAAA,GAAF;AAAOI,IAAAA,WAAP;AAAoBH,IAAAA,MAApB;AAA4BC,IAAAA;AAA5B,GAAP;AACD;;GAhEeN,e;UAOeD,kB","sourcesContent":["import { useState, useCallback, Dispatch, SetStateAction } from 'react'\nimport { useActiveWeb3React } from '.'\n\n// sign handle based on data format from EIP-712\n// based on twitter handle, return signature and message signing function\n// return setter function to reset signature if needed\nexport function useSignedHandle(twitterHandle: string | undefined): {\n  sig: string | undefined\n  signMessage: () => void\n  setSig: Dispatch<SetStateAction<string | undefined>>\n  error: string | undefined\n} {\n  // get signer and account to sign data with\n  const { library, account } = useActiveWeb3React()\n\n  // store and set signature\n  const [sig, setSig] = useState<string | undefined>()\n\n  // mark errors\n  const [error, setError] = useState<string | undefined>()\n\n  const signMessage = useCallback(() => {\n    // reset error\n    setError(undefined)\n\n    if (!library && account) {\n      return\n    }\n    const EIP712Domain = [\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n    ]\n    const domain = {\n      name: 'Sybil Verifier',\n      version: '1',\n    }\n    const Permit = [{ name: 'username', type: 'string' }]\n    const message = { username: twitterHandle }\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit,\n      },\n      domain,\n      primaryType: 'Permit',\n      message,\n    })\n\n    /**\n     * Need to use personal_sign as eth typed data is not\n     * supported by most hardware wallets yet.\n     */\n    if (account) {\n      //format as hex\n      const message = new Buffer(data).toString('hex')\n\n      // need to manually prefix with 0x for wallet connect\n      library\n        ?.send('personal_sign', ['0x' + message, account])\n        .catch((error) => {\n          console.log(error)\n          setError('Error signing message')\n        })\n        .then((sig) => {\n          setSig(sig)\n        })\n    }\n  }, [account, library, twitterHandle])\n\n  return { sig, signMessage, setSig, error }\n}\n"]},"metadata":{},"sourceType":"module"}