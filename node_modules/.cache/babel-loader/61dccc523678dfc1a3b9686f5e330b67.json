{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport { Pair, Token } from '@uniswap/sdk';\nimport { useCallback } from 'react';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { updateUserDarkMode, toggleURLWarning, updateTwitterAccount, updateLastSelectedProtocolID } from './actions';\nexport function serializeToken(token) {\n  return {\n    chainId: token.chainId,\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    name: token.name\n  };\n}\nexport function deserializeToken(serializedToken) {\n  return new Token(serializedToken.chainId, serializedToken.address, serializedToken.decimals, serializedToken.symbol, serializedToken.name);\n}\nexport function useIsDarkMode() {\n  _s();\n\n  const {\n    userDarkMode,\n    matchesDarkMode\n  } = useSelector(({\n    user: {\n      matchesDarkMode,\n      userDarkMode\n    }\n  }) => ({\n    userDarkMode,\n    matchesDarkMode\n  }), shallowEqual);\n  return userDarkMode === null ? matchesDarkMode : userDarkMode;\n}\n\n_s(useIsDarkMode, \"fn6etfcHXfMs02JV/usc15XJU0k=\", false, function () {\n  return [useSelector];\n});\n\nexport function useDarkModeManager() {\n  _s2();\n\n  const dispatch = useDispatch();\n  const darkMode = useIsDarkMode();\n  const toggleSetDarkMode = useCallback(() => {\n    dispatch(updateUserDarkMode({\n      userDarkMode: !darkMode\n    }));\n  }, [darkMode, dispatch]);\n  return [darkMode, toggleSetDarkMode];\n} // use for twitter login passed through query param\n\n_s2(useDarkModeManager, \"C48Gp1zKEL4YakCYKMkkFweY0qg=\", false, function () {\n  return [useDispatch, useIsDarkMode];\n});\n\nexport function useTwitterAccount() {\n  _s3();\n\n  const dispatch = useDispatch();\n  const twitterAccount = useSelector(state => state.user.twitterAccount); // set new or reset account\n\n  const setTwitterAccount = useCallback(newAccount => {\n    dispatch(updateTwitterAccount({\n      twitterAccount: newAccount\n    }));\n  }, [dispatch]);\n  return [twitterAccount, setTwitterAccount];\n} // use for twitter login passed through query param\n\n_s3(useTwitterAccount, \"jXCA03v8WKyAVa4iXlrqdHeSB44=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport function useLastSelectedProtocolID() {\n  _s4();\n\n  const dispatch = useDispatch();\n  const lastSelectedProtocolID = useSelector(state => state.user.lastSelectedProtocolID); // set new or reset account\n\n  const setLastSelectedProtocolID = useCallback(protocolID => {\n    dispatch(updateLastSelectedProtocolID({\n      protocolID: protocolID\n    }));\n  }, [dispatch]);\n  return [lastSelectedProtocolID, setLastSelectedProtocolID];\n}\n\n_s4(useLastSelectedProtocolID, \"WqeIyN2QK3iaazDnicU9fWgvp74=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport function useURLWarningVisible() {\n  _s5();\n\n  return useSelector(state => state.user.URLWarningVisible);\n}\n\n_s5(useURLWarningVisible, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useURLWarningToggle() {\n  _s6();\n\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleURLWarning()), [dispatch]);\n}\n/**\n * Given two tokens return the liquidity token that represents its liquidity shares\n * @param tokenA one of the two tokens\n * @param tokenB the other token\n */\n\n_s6(useURLWarningToggle, \"nhyv+fhSuBJ7yx/uYuCmtG3KTzU=\", false, function () {\n  return [useDispatch];\n});\n\nexport function toV2LiquidityToken([tokenA, tokenB]) {\n  return new Token(tokenA.chainId, Pair.getAddress(tokenA, tokenB), 18, 'UNI-V2', 'Uniswap V2');\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/sybil-interface-candle/src/state/user/hooks.tsx"],"names":["Pair","Token","useCallback","shallowEqual","useDispatch","useSelector","updateUserDarkMode","toggleURLWarning","updateTwitterAccount","updateLastSelectedProtocolID","serializeToken","token","chainId","address","decimals","symbol","name","deserializeToken","serializedToken","useIsDarkMode","userDarkMode","matchesDarkMode","user","useDarkModeManager","dispatch","darkMode","toggleSetDarkMode","useTwitterAccount","twitterAccount","state","setTwitterAccount","newAccount","useLastSelectedProtocolID","lastSelectedProtocolID","setLastSelectedProtocolID","protocolID","useURLWarningVisible","URLWarningVisible","useURLWarningToggle","toV2LiquidityToken","tokenA","tokenB","getAddress"],"mappings":"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","sourcesContent":["import { Pair, Token } from '@uniswap/sdk'\nimport { useCallback } from 'react'\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux'\n\nimport { AppDispatch, AppState } from '../index'\nimport {\n  SerializedToken,\n  updateUserDarkMode,\n  toggleURLWarning,\n  updateTwitterAccount,\n  updateLastSelectedProtocolID,\n} from './actions'\n\nexport function serializeToken(token: Token): SerializedToken {\n  return {\n    chainId: token.chainId,\n    address: token.address,\n    decimals: token.decimals,\n    symbol: token.symbol,\n    name: token.name,\n  }\n}\n\nexport function deserializeToken(serializedToken: SerializedToken): Token {\n  return new Token(\n    serializedToken.chainId,\n    serializedToken.address,\n    serializedToken.decimals,\n    serializedToken.symbol,\n    serializedToken.name\n  )\n}\n\nexport function useIsDarkMode(): boolean {\n  const { userDarkMode, matchesDarkMode } = useSelector<\n    AppState,\n    { userDarkMode: boolean | null; matchesDarkMode: boolean }\n  >(\n    ({ user: { matchesDarkMode, userDarkMode } }) => ({\n      userDarkMode,\n      matchesDarkMode,\n    }),\n    shallowEqual\n  )\n\n  return userDarkMode === null ? matchesDarkMode : userDarkMode\n}\n\nexport function useDarkModeManager(): [boolean, () => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const darkMode = useIsDarkMode()\n\n  const toggleSetDarkMode = useCallback(() => {\n    dispatch(updateUserDarkMode({ userDarkMode: !darkMode }))\n  }, [darkMode, dispatch])\n\n  return [darkMode, toggleSetDarkMode]\n}\n\n// use for twitter login passed through query param\nexport function useTwitterAccount(): [string | undefined, (newAccount: string | undefined) => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const twitterAccount = useSelector<AppState, AppState['user']['twitterAccount']>((state) => state.user.twitterAccount)\n\n  // set new or reset account\n  const setTwitterAccount = useCallback(\n    (newAccount: string | undefined) => {\n      dispatch(updateTwitterAccount({ twitterAccount: newAccount }))\n    },\n    [dispatch]\n  )\n  return [twitterAccount, setTwitterAccount]\n}\n\n// use for twitter login passed through query param\nexport function useLastSelectedProtocolID(): [string | undefined, (protocolID: string | undefined) => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const lastSelectedProtocolID = useSelector<AppState, AppState['user']['lastSelectedProtocolID']>(\n    (state) => state.user.lastSelectedProtocolID\n  )\n\n  // set new or reset account\n  const setLastSelectedProtocolID = useCallback(\n    (protocolID: string | undefined) => {\n      dispatch(updateLastSelectedProtocolID({ protocolID: protocolID }))\n    },\n    [dispatch]\n  )\n  return [lastSelectedProtocolID, setLastSelectedProtocolID]\n}\n\nexport function useURLWarningVisible(): boolean {\n  return useSelector((state: AppState) => state.user.URLWarningVisible)\n}\n\nexport function useURLWarningToggle(): () => void {\n  const dispatch = useDispatch()\n  return useCallback(() => dispatch(toggleURLWarning()), [dispatch])\n}\n\n/**\n * Given two tokens return the liquidity token that represents its liquidity shares\n * @param tokenA one of the two tokens\n * @param tokenB the other token\n */\nexport function toV2LiquidityToken([tokenA, tokenB]: [Token, Token]): Token {\n  return new Token(tokenA.chainId, Pair.getAddress(tokenA, tokenB), 18, 'UNI-V2', 'Uniswap V2')\n}\n"]},"metadata":{},"sourceType":"module"}