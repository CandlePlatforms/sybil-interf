{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { SUPPORTED_PROTOCOLS } from './../state/governance/reducer';\nimport { useDispatch } from 'react-redux';\nimport { useActiveProtocol } from '../state/governance/hooks';\nimport { useEffect } from 'react';\n/**\n * If valid id, update global state with new protocol\n * @param protocolID protocol id for supported protocol\n */\n\nexport function useProtocolUpdate(protocolID) {\n  _s();\n\n  const dispatch = useDispatch();\n  const [, setActiveProtocol] = useActiveProtocol();\n  useEffect(() => {\n    if (protocolID && Object.keys(SUPPORTED_PROTOCOLS).includes(protocolID)) {\n      setActiveProtocol(SUPPORTED_PROTOCOLS[protocolID]);\n    }\n  }, [dispatch, protocolID, setActiveProtocol]);\n}\n\n_s(useProtocolUpdate, \"NbBZMwTbs5oVF1F4b2Ifi2I9po8=\", false, function () {\n  return [useDispatch, useActiveProtocol];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/sybil-interface-candle/src/hooks/useProtocolUpdate.ts"],"names":["SUPPORTED_PROTOCOLS","useDispatch","useActiveProtocol","useEffect","useProtocolUpdate","protocolID","dispatch","setActiveProtocol","Object","keys","includes"],"mappings":";;AAAA,SAASA,mBAAT,QAAoC,+BAApC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AAEA,SAASC,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,UAA3B,EAA2D;AAAA;;AAChE,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAM,GAAGM,iBAAH,IAAwBL,iBAAiB,EAA/C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,UAAU,IAAIG,MAAM,CAACC,IAAP,CAAYT,mBAAZ,EAAiCU,QAAjC,CAA0CL,UAA1C,CAAlB,EAAyE;AACvEE,MAAAA,iBAAiB,CAACP,mBAAmB,CAACK,UAAD,CAApB,CAAjB;AACD;AACF,GAJQ,EAIN,CAACC,QAAD,EAAWD,UAAX,EAAuBE,iBAAvB,CAJM,CAAT;AAKD;;GAReH,iB;UACGH,W,EACaC,iB","sourcesContent":["import { SUPPORTED_PROTOCOLS } from './../state/governance/reducer'\nimport { useDispatch } from 'react-redux'\nimport { useActiveProtocol } from '../state/governance/hooks'\nimport { AppDispatch } from '../state'\nimport { useEffect } from 'react'\n/**\n * If valid id, update global state with new protocol\n * @param protocolID protocol id for supported protocol\n */\nexport function useProtocolUpdate(protocolID: string | undefined) {\n  const dispatch = useDispatch<AppDispatch>()\n  const [, setActiveProtocol] = useActiveProtocol()\n  useEffect(() => {\n    if (protocolID && Object.keys(SUPPORTED_PROTOCOLS).includes(protocolID)) {\n      setActiveProtocol(SUPPORTED_PROTOCOLS[protocolID])\n    }\n  }, [dispatch, protocolID, setActiveProtocol])\n}\n"]},"metadata":{},"sourceType":"module"}