{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { fetchProfileData, fetchLatestTweet } from '../../data/social';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateIdentities } from './actions';\nimport { isAddress } from '../../utils';\nconst VERIFICATION_WORKER_URL = 'https://sybil-verifier.uniswap.workers.dev'; // get all identity info from github file\n\nexport function useAllIdentities() {\n  _s();\n\n  const dispatch = useDispatch();\n  const identities = useSelector(state => state.social.identities); // set new or reset account\n\n  const setIdentities = useCallback(identities => {\n    dispatch(updateIdentities({\n      identities\n    }));\n  }, [dispatch]);\n  return [identities, setIdentities];\n} // filter for only entities with uncategorized names\n\n_s(useAllIdentities, \"Zw3X5GKUrTH4aK5/hd3ur01X1Os=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\nexport function useAllVerifiedHandles() {\n  _s2();\n\n  const [allIdentities] = useAllIdentities();\n\n  if (allIdentities) {\n    const twitterOnly = {};\n    Object.keys(allIdentities).map(address => {\n      if (allIdentities[address].twitter !== undefined) {\n        twitterOnly[address] = allIdentities[address].twitter;\n      }\n\n      return true;\n    });\n    return twitterOnly;\n  } else {\n    return undefined;\n  }\n} // filter for only entities with twitter handles\n// undefined is no verification, null is loading\n\n_s2(useAllVerifiedHandles, \"94j0fRwzANtIh5TfzdGCNivqhic=\", false, function () {\n  return [useAllIdentities];\n});\n\nexport function useVerifiedHandle(address) {\n  _s3();\n\n  const allHandles = useAllVerifiedHandles();\n  const formattedAddress = address && isAddress(address);\n\n  if (!allHandles) {\n    return null;\n  }\n\n  if (!formattedAddress) {\n    return undefined;\n  }\n\n  return allHandles[formattedAddress];\n} // check for any indentity info\n// undefined is no verification, null is loading\n\n_s3(useVerifiedHandle, \"ytor2mjAycPFHWykSgtxda0I794=\", false, function () {\n  return [useAllVerifiedHandles];\n});\n\nexport function useIdentity(address) {\n  _s4();\n\n  const [allIdentities] = useAllIdentities();\n  const formattedAddress = address && isAddress(address);\n\n  if (!allIdentities) {\n    return null;\n  }\n\n  if (!formattedAddress) {\n    return undefined;\n  }\n\n  return allIdentities[formattedAddress];\n} // monitor status of submission\n\n_s4(useIdentity, \"94j0fRwzANtIh5TfzdGCNivqhic=\", false, function () {\n  return [useAllIdentities];\n});\n\n// verify a new adress -> handle mapping\n// returns success if properly inserted into gist and account in tweet matches signed in account\nexport function useVerifyCallback(tweetID) {\n  _s5();\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const verifyCallback = useCallback(() => {\n    if (!tweetID) return Promise.reject({\n      success: false,\n      error: 'Invalid tweet id'\n    });\n    return fetch(`${VERIFICATION_WORKER_URL}/api/verify?account=${account}&id=${tweetID}`).then(async res => {\n      if (res.status === 200) {\n        return {\n          success: true\n        };\n      } else {\n        const errorText = await res.text();\n\n        if (res.status === 400 && errorText === 'Invalid tweet format.') {\n          return {\n            success: false,\n            error: 'Invalid tweet format'\n          };\n        }\n\n        if (res.status === 400 && errorText === 'Invalid tweet id.') {\n          return {\n            success: false,\n            error: 'Invalid tweet id'\n          };\n        }\n\n        return {\n          success: false,\n          error: 'Unknown error, please try again.'\n        };\n      }\n    }).catch(() => {\n      return {\n        success: false,\n        error: 'Error submitting verification'\n      };\n    });\n  }, [account, tweetID]);\n  return {\n    verifyCallback\n  };\n}\n\n_s5(useVerifyCallback, \"n8gkowpihfRPPFZF41iYu1MVrqw=\", false, function () {\n  return [useActiveWeb3React];\n});\n\n// get handle and profile image from twitter\nexport function useTwitterProfileData(handle) {\n  _s6();\n\n  const [formattedData, setFormattedData] = useState();\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    if (!handle) {\n      setFormattedData(undefined);\n    } else if (!error) {\n      fetchProfileData(handle).then(profileData => {\n        if (profileData === null || profileData === void 0 ? void 0 : profileData.data) {\n          setFormattedData({\n            name: profileData.data.name,\n            handle: profileData.data.username,\n            profileURL: profileData.data.profile_image_url\n          });\n        }\n      }).catch(() => {\n        console.log('Error fetching profile data for user');\n        setError(true);\n      });\n    }\n  }, [handle, error]);\n  return formattedData;\n}\n\n_s6(useTwitterProfileData, \"LhjAZmPJmJ/aBn/B1D9VndoS0Ok=\");\n\nexport function useMultipleTwitterProfileDatas(handles) {\n  _s7();\n\n  const [formattedData, setFormattedData] = useState();\n  const length = handles.length;\n  useEffect(() => {\n    setFormattedData(undefined);\n  }, [length]);\n  useEffect(() => {\n    async function fetchData() {\n      // for each handle attestation - verify which ones are legit,\n      Promise.all(handles.map(async handle => {\n        if (handle) {\n          return fetchProfileData(handle).then(profileData => {\n            var _profileData$data;\n\n            return {\n              account: '',\n              handle,\n              profileURL: profileData === null || profileData === void 0 ? void 0 : (_profileData$data = profileData.data) === null || _profileData$data === void 0 ? void 0 : _profileData$data.profile_image_url\n            };\n          }).catch(() => undefined);\n        } else {\n          return undefined;\n        }\n      })).then(handlesData => {\n        setFormattedData(Object.assign({}, ...handlesData.map(key => key && {\n          [key.handle]: key\n        })));\n      }).catch(() => undefined);\n    } // only fetch if valid list of handles\n\n\n    if (!formattedData) {\n      fetchData();\n    }\n  }, [handles, formattedData]);\n  return formattedData;\n} // check for tweet every couple seconds after theyve kicked off flow\n\n_s7(useMultipleTwitterProfileDatas, \"dPZ4gxj+xKtmhvf3+KGptZw+sf0=\");\n\nconst POLL_DURATION_MS = 8000; // length after which to check\n\nexport function useTweetWatcher(sig, // used to check regex\ntwitterHandle, // handle to fetch tweet from\nwatch, // wether to actively look or not\nsetWatch, setTweetID, setTweetError) {\n  _s8();\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (twitterHandle && watch) {\n        fetchLatestTweet(twitterHandle).then(res => {\n          if (res === null || res === void 0 ? void 0 : res.data[0]) {\n            var _res$data;\n\n            const tweetData = res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data[0]; // check that tweet contains correct data\n\n            const passedRegex = sig && tweetData.text.includes('sig:' + sig);\n\n            if (passedRegex) {\n              setTweetID(tweetData.id);\n              setTweetError(undefined);\n              setWatch(false);\n            } else {\n              setWatch(false);\n              setTweetError('Tweet not found, try again with exact message.');\n            }\n          } else {\n            setWatch(false);\n            setTweetError('Tweet not found, try again.');\n          }\n        }).catch(() => {\n          setWatch(false);\n          setTweetError('Tweet not found, try again.');\n        });\n      }\n    }, POLL_DURATION_MS);\n    return () => clearTimeout(timer);\n  }, [setTweetError, setTweetID, setWatch, sig, twitterHandle, watch]);\n}\n\n_s8(useTweetWatcher, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["/Users/safahi/Downloads/sybil-interface-candle/src/state/social/hooks.tsx"],"names":["useState","useEffect","useCallback","fetchProfileData","fetchLatestTweet","useActiveWeb3React","useDispatch","useSelector","updateIdentities","isAddress","VERIFICATION_WORKER_URL","useAllIdentities","dispatch","identities","state","social","setIdentities","useAllVerifiedHandles","allIdentities","twitterOnly","Object","keys","map","address","twitter","undefined","useVerifiedHandle","allHandles","formattedAddress","useIdentity","useVerifyCallback","tweetID","account","verifyCallback","Promise","reject","success","error","fetch","then","res","status","errorText","text","catch","useTwitterProfileData","handle","formattedData","setFormattedData","setError","profileData","data","name","username","profileURL","profile_image_url","console","log","useMultipleTwitterProfileDatas","handles","length","fetchData","all","handlesData","assign","key","POLL_DURATION_MS","useTweetWatcher","sig","twitterHandle","watch","setWatch","setTweetID","setTweetError","timer","setTimeout","tweetData","passedRegex","includes","id","clearTimeout"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { fetchProfileData, ProfileDataResponse, fetchLatestTweet, LatestTweetResponse } from '../../data/social'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { AppDispatch, AppState } from '..'\nimport { updateIdentities } from './actions'\nimport { TwitterEntry, Identities, Identity } from './reducer'\nimport { isAddress } from '../../utils'\n\nconst VERIFICATION_WORKER_URL = 'https://sybil-verifier.uniswap.workers.dev'\n\n// get all identity info from github file\nexport function useAllIdentities(): [Identities | undefined, (identities: Identities) => void] {\n  const dispatch = useDispatch<AppDispatch>()\n  const identities = useSelector<AppState, AppState['social']['identities']>((state) => state.social.identities)\n  // set new or reset account\n  const setIdentities = useCallback(\n    (identities: Identities) => {\n      dispatch(updateIdentities({ identities }))\n    },\n    [dispatch]\n  )\n  return [identities, setIdentities]\n}\n\n// filter for only entities with uncategorized names\nexport function useAllVerifiedHandles(): { [address: string]: TwitterEntry | undefined } | undefined {\n  const [allIdentities] = useAllIdentities()\n  if (allIdentities) {\n    const twitterOnly: { [address: string]: TwitterEntry | undefined } | undefined = {}\n    Object.keys(allIdentities).map((address) => {\n      if (allIdentities[address].twitter !== undefined) {\n        twitterOnly[address] = allIdentities[address].twitter\n      }\n      return true\n    })\n    return twitterOnly\n  } else {\n    return undefined\n  }\n}\n\n// filter for only entities with twitter handles\n// undefined is no verification, null is loading\nexport function useVerifiedHandle(address: string | null | undefined): TwitterEntry | undefined | null {\n  const allHandles = useAllVerifiedHandles()\n  const formattedAddress = address && isAddress(address)\n  if (!allHandles) {\n    return null\n  }\n  if (!formattedAddress) {\n    return undefined\n  }\n  return allHandles[formattedAddress]\n}\n\n// check for any indentity info\n// undefined is no verification, null is loading\nexport function useIdentity(address: string | null | undefined): Identity | undefined | null {\n  const [allIdentities] = useAllIdentities()\n\n  const formattedAddress = address && isAddress(address)\n  if (!allIdentities) {\n    return null\n  }\n  if (!formattedAddress) {\n    return undefined\n  }\n  return allIdentities[formattedAddress]\n}\n\n// monitor status of submission\nexport interface VerifyResult {\n  readonly success: boolean\n  readonly error?: string | undefined\n}\n\n// verify a new adress -> handle mapping\n// returns success if properly inserted into gist and account in tweet matches signed in account\nexport function useVerifyCallback(tweetID: string | undefined): { verifyCallback: () => Promise<VerifyResult> } {\n  const { account } = useActiveWeb3React()\n\n  const verifyCallback = useCallback(() => {\n    if (!tweetID)\n      return Promise.reject({\n        success: false,\n        error: 'Invalid tweet id',\n      })\n\n    return fetch(`${VERIFICATION_WORKER_URL}/api/verify?account=${account}&id=${tweetID}`)\n      .then(async (res) => {\n        if (res.status === 200) {\n          return {\n            success: true,\n          }\n        } else {\n          const errorText = await res.text()\n          if (res.status === 400 && errorText === 'Invalid tweet format.') {\n            return {\n              success: false,\n              error: 'Invalid tweet format',\n            }\n          }\n          if (res.status === 400 && errorText === 'Invalid tweet id.') {\n            return {\n              success: false,\n              error: 'Invalid tweet id',\n            }\n          }\n          return {\n            success: false,\n            error: 'Unknown error, please try again.',\n          }\n        }\n      })\n      .catch(() => {\n        return {\n          success: false,\n          error: 'Error submitting verification',\n        }\n      })\n  }, [account, tweetID])\n\n  return { verifyCallback }\n}\n\ninterface TwitterProfileData {\n  name: string\n  handle: string\n  profileURL: string\n}\n// get handle and profile image from twitter\nexport function useTwitterProfileData(handle: string | undefined | null): TwitterProfileData | undefined {\n  const [formattedData, setFormattedData] = useState<TwitterProfileData | undefined>()\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    if (!handle) {\n      setFormattedData(undefined)\n    } else if (!error) {\n      fetchProfileData(handle)\n        .then((profileData: ProfileDataResponse | null) => {\n          if (profileData?.data) {\n            setFormattedData({\n              name: profileData.data.name,\n              handle: profileData.data.username,\n              profileURL: profileData.data.profile_image_url,\n            })\n          }\n        })\n        .catch(() => {\n          console.log('Error fetching profile data for user')\n          setError(true)\n        })\n    }\n  }, [handle, error])\n\n  return formattedData\n}\n\nexport function useMultipleTwitterProfileDatas(\n  handles: (string | undefined)[]\n): { [handle: string]: TwitterProfileData | undefined } | undefined {\n  const [formattedData, setFormattedData] = useState<{ [handle: string]: TwitterProfileData | undefined }>()\n\n  const length = handles.length\n  useEffect(() => {\n    setFormattedData(undefined)\n  }, [length])\n\n  useEffect(() => {\n    async function fetchData() {\n      // for each handle attestation - verify which ones are legit,\n      Promise.all(\n        handles.map(async (handle: string | undefined) => {\n          if (handle) {\n            return fetchProfileData(handle)\n              .then((profileData) => {\n                return {\n                  account: '',\n                  handle,\n                  profileURL: profileData?.data?.profile_image_url,\n                }\n              })\n              .catch(() => undefined)\n          } else {\n            return undefined\n          }\n        })\n      )\n        .then((handlesData) => {\n          setFormattedData(Object.assign({}, ...handlesData.map((key) => key && { [key.handle]: key })))\n        })\n        .catch(() => undefined)\n    }\n\n    // only fetch if valid list of handles\n    if (!formattedData) {\n      fetchData()\n    }\n  }, [handles, formattedData])\n\n  return formattedData\n}\n\n// check for tweet every couple seconds after theyve kicked off flow\nconst POLL_DURATION_MS = 8000 // length after which to check\nexport function useTweetWatcher(\n  sig: string | undefined, // used to check regex\n  twitterHandle: string | undefined, // handle to fetch tweet from\n  watch: boolean, // wether to actively look or not\n  setWatch: React.Dispatch<React.SetStateAction<boolean>>,\n  setTweetID: React.Dispatch<React.SetStateAction<string | undefined>>,\n  setTweetError: React.Dispatch<React.SetStateAction<string | undefined>>\n) {\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      if (twitterHandle && watch) {\n        fetchLatestTweet(twitterHandle)\n          .then((res: LatestTweetResponse | null) => {\n            if (res?.data[0]) {\n              const tweetData = res?.data?.[0]\n              // check that tweet contains correct data\n              const passedRegex = sig && tweetData.text.includes('sig:' + sig)\n              if (passedRegex) {\n                setTweetID(tweetData.id)\n                setTweetError(undefined)\n                setWatch(false)\n              } else {\n                setWatch(false)\n                setTweetError('Tweet not found, try again with exact message.')\n              }\n            } else {\n              setWatch(false)\n              setTweetError('Tweet not found, try again.')\n            }\n          })\n          .catch(() => {\n            setWatch(false)\n            setTweetError('Tweet not found, try again.')\n          })\n      }\n    }, POLL_DURATION_MS)\n    return () => clearTimeout(timer)\n  }, [setTweetError, setTweetID, setWatch, sig, twitterHandle, watch])\n}\n"]},"metadata":{},"sourceType":"module"}