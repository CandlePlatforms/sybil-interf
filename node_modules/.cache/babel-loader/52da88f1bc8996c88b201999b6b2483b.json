{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { abi as GOVERNANCE_ABI } from '@uniswap/governance/build/GovernorAlpha.json';\nimport { useGovernanceContractBravo, useIsAave } from 'hooks/useContract';\nimport { useActiveProtocol } from 'state/governance/hooks';\nimport { useState, useEffect, useMemo } from 'react';\nimport { useGenericAlphaProposalCounts, useGenericBravoProposalCount } from 'data/proposalCount.ts';\nimport { useMultipleContractMultipleData, NEVER_RELOAD, useSingleContractMultipleData } from 'state/multicall/hooks';\nimport { Interface } from '@ethersproject/abi';\nimport GOVERNANCE_AAVE_ABI from '../../constants/abis/aave-governance.json';\n/**\n * @TODO can this be used to speed up the loading?\n */\n\nexport function useGenericAlphaProposalStates() {\n  _s();\n\n  const [activeProtocol] = useActiveProtocol();\n  const isAaveGov = useIsAave();\n  const [statuses, setStatuses] = useState(); // get total amount\n\n  const alphaCounts = useGenericAlphaProposalCounts();\n  const ids = alphaCounts ? alphaCounts.map(total => {\n    return Array.from({\n      length: total\n    }, (v, k) => [isAaveGov ? k : k + 1]);\n  }) : undefined;\n  const statusRes = useMultipleContractMultipleData(activeProtocol ? activeProtocol === null || activeProtocol === void 0 ? void 0 : activeProtocol.governanceAlphaAddresses : [undefined], new Interface(useIsAave() ? GOVERNANCE_AAVE_ABI : GOVERNANCE_ABI), isAaveGov ? 'getProposalState' : 'state', ids); // for all versions of alpha gov, grab status and concat into one array\n\n  const combinedStatuses = statusRes.reduce((accum, res) => {\n    const currentStatuses = res.map(x => {\n      if (x.result) {\n        var _x$result;\n\n        return (_x$result = x.result) === null || _x$result === void 0 ? void 0 : _x$result[0];\n      }\n\n      return undefined;\n    });\n    return accum.concat(currentStatuses);\n  }, []);\n  const loadingOrError = statusRes && alphaCounts && (statusRes === null || statusRes === void 0 ? void 0 : statusRes.length) !== (alphaCounts === null || alphaCounts === void 0 ? void 0 : alphaCounts.length) && combinedStatuses.some(x => x === undefined);\n  useEffect(() => {\n    if (!statuses && !loadingOrError) {\n      if (combinedStatuses === null || combinedStatuses === void 0 ? void 0 : combinedStatuses[0]) {\n        setStatuses(combinedStatuses);\n      }\n    }\n  }, [statuses, statusRes, combinedStatuses, loadingOrError]);\n  return statuses;\n}\n\n_s(useGenericAlphaProposalStates, \"H4pkqh1hvnYL2XJ/vpArt8RK3K4=\", false, function () {\n  return [useActiveProtocol, useIsAave, useGenericAlphaProposalCounts, useMultipleContractMultipleData, useIsAave];\n});\n\nexport function useGenericBravoProposalStates() {\n  _s2();\n\n  const [activeProtocol] = useActiveProtocol();\n  const isAaveGov = useIsAave();\n  const govContractBravo = useGovernanceContractBravo();\n  const migrationProposal = activeProtocol === null || activeProtocol === void 0 ? void 0 : activeProtocol.migrationProposalId;\n  const [statuses, setStatuses] = useState(); // get total amount\n\n  const proposalCount = useGenericBravoProposalCount();\n  const ids = useMemo(() => proposalCount ? Array.from({\n    length: proposalCount\n  }, (v, k) => [isAaveGov ? k : k + 1]) : [['']], [isAaveGov, proposalCount]);\n  const cutoffProposal = migrationProposal !== undefined ? migrationProposal : proposalCount;\n  const bravoOnlyIds = useMemo(() => ids.slice(cutoffProposal), [cutoffProposal, ids]);\n  const alphaStates = useGenericAlphaProposalStates();\n  const bravoStates = useSingleContractMultipleData(proposalCount ? govContractBravo : undefined, isAaveGov ? 'getProposalState' : 'state', bravoOnlyIds, NEVER_RELOAD);\n  useEffect(() => {\n    if (!statuses && proposalCount && alphaStates) {\n      const formattedBravo = bravoStates === null || bravoStates === void 0 ? void 0 : bravoStates.map(res => {\n        if (!res.loading && res.valid) {\n          var _res$result;\n\n          return (_res$result = res.result) === null || _res$result === void 0 ? void 0 : _res$result[0];\n        }\n      });\n\n      if (formattedBravo[0] !== undefined) {\n        setStatuses(alphaStates.concat(formattedBravo));\n      }\n    }\n  }, [statuses, proposalCount, alphaStates, bravoStates]);\n  return statuses;\n}\n\n_s2(useGenericBravoProposalStates, \"nFaJRPRx0AvCY80x42AHHoOB7k0=\", false, function () {\n  return [useActiveProtocol, useIsAave, useGovernanceContractBravo, useGenericBravoProposalCount, useGenericAlphaProposalStates, useSingleContractMultipleData];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/sybil-interface-candle/src/data/proposalStates/index.ts"],"names":["abi","GOVERNANCE_ABI","useGovernanceContractBravo","useIsAave","useActiveProtocol","useState","useEffect","useMemo","useGenericAlphaProposalCounts","useGenericBravoProposalCount","useMultipleContractMultipleData","NEVER_RELOAD","useSingleContractMultipleData","Interface","GOVERNANCE_AAVE_ABI","useGenericAlphaProposalStates","activeProtocol","isAaveGov","statuses","setStatuses","alphaCounts","ids","map","total","Array","from","length","v","k","undefined","statusRes","governanceAlphaAddresses","combinedStatuses","reduce","accum","res","currentStatuses","x","result","concat","loadingOrError","some","useGenericBravoProposalStates","govContractBravo","migrationProposal","migrationProposalId","proposalCount","cutoffProposal","bravoOnlyIds","slice","alphaStates","bravoStates","formattedBravo","loading","valid"],"mappings":"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","sourcesContent":["import { abi as GOVERNANCE_ABI } from '@uniswap/governance/build/GovernorAlpha.json'\nimport { useGovernanceContractBravo, useIsAave } from 'hooks/useContract'\nimport { useActiveProtocol } from 'state/governance/hooks'\nimport { useState, useEffect, useMemo } from 'react'\nimport { useGenericAlphaProposalCounts, useGenericBravoProposalCount } from 'data/proposalCount.ts'\nimport { useMultipleContractMultipleData, NEVER_RELOAD, useSingleContractMultipleData } from 'state/multicall/hooks'\nimport { Interface } from '@ethersproject/abi'\nimport GOVERNANCE_AAVE_ABI from '../../constants/abis/aave-governance.json'\n\n/**\n * @TODO can this be used to speed up the loading?\n */\nexport function useGenericAlphaProposalStates(): number[] | undefined {\n  const [activeProtocol] = useActiveProtocol()\n  const isAaveGov = useIsAave()\n\n  const [statuses, setStatuses] = useState<number[] | undefined>()\n\n  // get total amount\n  const alphaCounts: number[] | undefined = useGenericAlphaProposalCounts()\n\n  const ids = alphaCounts\n    ? alphaCounts.map((total) => {\n        return Array.from({ length: total }, (v, k) => [isAaveGov ? k : k + 1])\n      })\n    : undefined\n\n  const statusRes = useMultipleContractMultipleData(\n    activeProtocol ? activeProtocol?.governanceAlphaAddresses : [undefined],\n    new Interface(useIsAave() ? GOVERNANCE_AAVE_ABI : GOVERNANCE_ABI),\n    isAaveGov ? 'getProposalState' : 'state',\n    ids\n  )\n\n  // for all versions of alpha gov, grab status and concat into one array\n  const combinedStatuses = statusRes.reduce((accum: number[], res) => {\n    const currentStatuses = res.map((x) => {\n      if (x.result) {\n        return x.result?.[0]\n      }\n      return undefined\n    })\n    return accum.concat(currentStatuses)\n  }, [])\n\n  const loadingOrError =\n    statusRes &&\n    alphaCounts &&\n    statusRes?.length !== alphaCounts?.length &&\n    combinedStatuses.some((x) => x === undefined)\n\n  useEffect(() => {\n    if (!statuses && !loadingOrError) {\n      if (combinedStatuses?.[0]) {\n        setStatuses(combinedStatuses)\n      }\n    }\n  }, [statuses, statusRes, combinedStatuses, loadingOrError])\n\n  return statuses\n}\n\nexport function useGenericBravoProposalStates(): number[] | undefined {\n  const [activeProtocol] = useActiveProtocol()\n  const isAaveGov = useIsAave()\n\n  const govContractBravo = useGovernanceContractBravo()\n\n  const migrationProposal = activeProtocol?.migrationProposalId\n\n  const [statuses, setStatuses] = useState<number[] | undefined>()\n\n  // get total amount\n  const proposalCount = useGenericBravoProposalCount()\n  const ids = useMemo(\n    () => (proposalCount ? Array.from({ length: proposalCount }, (v, k) => [isAaveGov ? k : k + 1]) : [['']]),\n    [isAaveGov, proposalCount]\n  )\n  const cutoffProposal = migrationProposal !== undefined ? migrationProposal : proposalCount\n  const bravoOnlyIds = useMemo(() => ids.slice(cutoffProposal), [cutoffProposal, ids])\n\n  const alphaStates = useGenericAlphaProposalStates()\n  const bravoStates = useSingleContractMultipleData(\n    proposalCount ? govContractBravo : undefined,\n    isAaveGov ? 'getProposalState' : 'state',\n    bravoOnlyIds,\n    NEVER_RELOAD\n  )\n\n  useEffect(() => {\n    if (!statuses && proposalCount && alphaStates) {\n      const formattedBravo = bravoStates?.map((res) => {\n        if (!res.loading && res.valid) {\n          return res.result?.[0]\n        }\n      })\n      if (formattedBravo[0] !== undefined) {\n        setStatuses(alphaStates.concat(formattedBravo))\n      }\n    }\n  }, [statuses, proposalCount, alphaStates, bravoStates])\n\n  return statuses\n}\n"]},"metadata":{},"sourceType":"module"}