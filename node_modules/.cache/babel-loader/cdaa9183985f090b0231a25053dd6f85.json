{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Downloads/sybil-interface-candle/src/components/ProfileGeneric/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { AutoColumn } from '../Column';\nimport styled from 'styled-components';\nimport { useToggleModal } from '../../state/application/hooks';\nimport { useActiveWeb3React } from '../../hooks';\nimport ReactGA from 'react-ga';\nimport { ApplicationModal } from '../../state/application/actions';\nimport { RowBetween } from '../Row';\nimport { TYPE } from '../../theme';\nimport { ButtonBasic, ButtonCustom } from '../Button';\nimport { useVerifiedHandle } from '../../state/social/hooks';\nimport { useTwitterAccount } from '../../state/user/hooks';\nimport useParsedQueryString from '../../hooks/useParsedQueryString';\nimport Modal from '../Modal';\nimport TwitterFlow from '../twitter/TwitterFlow';\nimport TwitterLoginButton from '../twitter/TwitterLoginButton';\nimport TwitterIcon from '../../assets/images/Twitter_Logo_Blue.png';\nimport WalletSummary from '../Profile/WalletSummary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SectionWrapper = styled.div`\n  width: 100%;\n  padding: 1rem;\n  padding-top: 2rem;\n  height: 100%;\n\n  @media (max-width: 1080px) {\n    padding: 0;\n  }\n`;\n_c = SectionWrapper;\nconst BackgroundWrapper = styled.div`\n  background: ${({\n  theme\n}) => theme.bg2};\n  padding: 1rem;\n  height: ${({\n  account\n}) => account ? '100%' : 'initial'};\n  border-radius: 20px;\n\n  max-width: 500px;\n  margin: auto;\n`;\n_c2 = BackgroundWrapper;\nconst TwitterButton = styled(ButtonBasic)`\n  padding: 6px 12px;\n  white-space: nowrap;\n  width: 100%;\n`;\n_c3 = TwitterButton;\nconst TwitterLogo = styled.img`\n  height: 24px;\n  width: 24px;\n`;\n_c4 = TwitterLogo;\nexport default function ProfileGeneric() {\n  _s();\n\n  // account details\n  const {\n    account\n  } = useActiveWeb3React(); // UI views\n\n  const toggleWalletModal = useToggleModal(ApplicationModal.WALLET); // toggle modal for twitter verification\n\n  const [showTwitterFlow, setShowTwitterFlow] = useState(false); // get any verified handles for this user + timestamps they were created at\n\n  const [twitterAccount] = useTwitterAccount(); // logged in account\n\n  const verifiedHandleEntry = useVerifiedHandle(account);\n  const loadingVerifiedHandles = verifiedHandleEntry === null; // on redirect from twitter, if signed in, not verified, and no loading, show modal\n\n  const [loaded, setLoaded] = useState(false);\n  const {\n    username: usernameQuery\n  } = useParsedQueryString();\n  useEffect(() => {\n    if (twitterAccount && !verifiedHandleEntry && !loadingVerifiedHandles && !loaded && usernameQuery) {\n      setShowTwitterFlow(true);\n      setLoaded(true);\n    }\n  }, [loadingVerifiedHandles, twitterAccount, loaded, usernameQuery, verifiedHandleEntry]);\n  const primaryColor = '#2F80ED';\n  const secondaryColor = '#EBF4FF';\n\n  const ProfileContent = () => /*#__PURE__*/_jsxDEV(SectionWrapper, {\n    children: /*#__PURE__*/_jsxDEV(BackgroundWrapper, {\n      account: !!account,\n      children: [/*#__PURE__*/_jsxDEV(TYPE.main, {\n        fontSize: \"20px\",\n        fontWeight: \"700\",\n        style: {\n          marginBottom: '1rem'\n        },\n        children: \"Your Sybil identity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), !account ? /*#__PURE__*/_jsxDEV(TYPE.body, {\n        fontWeight: 500,\n        fontSize: \"14px\",\n        color: primaryColor,\n        mb: \"1rem\",\n        children: [\"Connect wallet to link wallet address to Sybil identity.\", /*#__PURE__*/_jsxDEV(ButtonCustom, {\n          color: primaryColor,\n          bgColor: secondaryColor,\n          style: {\n            fontWeight: 500,\n            fontSize: '16px',\n            marginTop: '16px'\n          },\n          onClick: () => toggleWalletModal(),\n          children: \"Connect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(AutoColumn, {\n        gap: \"16px\",\n        children: [/*#__PURE__*/_jsxDEV(WalletSummary, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), !verifiedHandleEntry && account ? !twitterAccount ? /*#__PURE__*/_jsxDEV(TwitterLoginButton, {\n          text: \"Add a public identity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(TwitterButton, {\n          onClick: () => {\n            ReactGA.event({\n              category: 'Social',\n              action: 'Start Link',\n              label: 'Not linked'\n            });\n            setShowTwitterFlow(true);\n          },\n          children: /*#__PURE__*/_jsxDEV(RowBetween, {\n            children: [/*#__PURE__*/_jsxDEV(TYPE.white, {\n              fontSize: \"14px\",\n              children: \"Add a public identity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(TwitterLogo, {\n              src: TwitterIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this) : null, !verifiedHandleEntry && account ? /*#__PURE__*/_jsxDEV(TYPE.blue, {\n          fontSize: \"14px\",\n          children: `If the governance program you're participating in is not listed here, you can still add an identity to your ethereum address. Connecting your Twitter to your address can help people find you.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: showTwitterFlow,\n      onDismiss: () => setShowTwitterFlow(false),\n      children: /*#__PURE__*/_jsxDEV(TwitterFlow, {\n        onDismiss: () => setShowTwitterFlow(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ProfileContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ProfileGeneric, \"4HOrYF7/U42YCwTKkBo16uI0om0=\", false, function () {\n  return [useActiveWeb3React, useToggleModal, useTwitterAccount, useVerifiedHandle, useParsedQueryString];\n});\n\n_c5 = ProfileGeneric;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"SectionWrapper\");\n$RefreshReg$(_c2, \"BackgroundWrapper\");\n$RefreshReg$(_c3, \"TwitterButton\");\n$RefreshReg$(_c4, \"TwitterLogo\");\n$RefreshReg$(_c5, \"ProfileGeneric\");","map":{"version":3,"sources":["/Users/safahi/Downloads/sybil-interface-candle/src/components/ProfileGeneric/index.tsx"],"names":["React","useState","useEffect","AutoColumn","styled","useToggleModal","useActiveWeb3React","ReactGA","ApplicationModal","RowBetween","TYPE","ButtonBasic","ButtonCustom","useVerifiedHandle","useTwitterAccount","useParsedQueryString","Modal","TwitterFlow","TwitterLoginButton","TwitterIcon","WalletSummary","SectionWrapper","div","BackgroundWrapper","theme","bg2","account","TwitterButton","TwitterLogo","img","ProfileGeneric","toggleWalletModal","WALLET","showTwitterFlow","setShowTwitterFlow","twitterAccount","verifiedHandleEntry","loadingVerifiedHandles","loaded","setLoaded","username","usernameQuery","primaryColor","secondaryColor","ProfileContent","marginBottom","fontWeight","fontSize","marginTop","event","category","action","label"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { AutoColumn } from '../Column'\nimport styled from 'styled-components'\nimport { useToggleModal } from '../../state/application/hooks'\nimport { useActiveWeb3React } from '../../hooks'\nimport ReactGA from 'react-ga'\nimport { ApplicationModal } from '../../state/application/actions'\nimport { RowBetween } from '../Row'\nimport { TYPE } from '../../theme'\nimport { ButtonBasic, ButtonCustom } from '../Button'\nimport { useVerifiedHandle } from '../../state/social/hooks'\nimport { useTwitterAccount } from '../../state/user/hooks'\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\nimport Modal from '../Modal'\nimport TwitterFlow from '../twitter/TwitterFlow'\nimport TwitterLoginButton from '../twitter/TwitterLoginButton'\nimport TwitterIcon from '../../assets/images/Twitter_Logo_Blue.png'\nimport WalletSummary from '../Profile/WalletSummary'\n\nconst SectionWrapper = styled.div`\n  width: 100%;\n  padding: 1rem;\n  padding-top: 2rem;\n  height: 100%;\n\n  @media (max-width: 1080px) {\n    padding: 0;\n  }\n`\n\nconst BackgroundWrapper = styled.div<{ account: boolean }>`\n  background: ${({ theme }) => theme.bg2};\n  padding: 1rem;\n  height: ${({ account }) => (account ? '100%' : 'initial')};\n  border-radius: 20px;\n\n  max-width: 500px;\n  margin: auto;\n`\n\nconst TwitterButton = styled(ButtonBasic)`\n  padding: 6px 12px;\n  white-space: nowrap;\n  width: 100%;\n`\n\nconst TwitterLogo = styled.img`\n  height: 24px;\n  width: 24px;\n`\n\nexport default function ProfileGeneric() {\n  // account details\n  const { account } = useActiveWeb3React()\n\n  // UI views\n  const toggleWalletModal = useToggleModal(ApplicationModal.WALLET)\n\n  // toggle modal for twitter verification\n  const [showTwitterFlow, setShowTwitterFlow] = useState<boolean>(false)\n\n  // get any verified handles for this user + timestamps they were created at\n  const [twitterAccount] = useTwitterAccount() // logged in account\n  const verifiedHandleEntry = useVerifiedHandle(account)\n\n  const loadingVerifiedHandles = verifiedHandleEntry === null\n\n  // on redirect from twitter, if signed in, not verified, and no loading, show modal\n  const [loaded, setLoaded] = useState(false)\n  const { username: usernameQuery } = useParsedQueryString()\n  useEffect(() => {\n    if (twitterAccount && !verifiedHandleEntry && !loadingVerifiedHandles && !loaded && usernameQuery) {\n      setShowTwitterFlow(true)\n      setLoaded(true)\n    }\n  }, [loadingVerifiedHandles, twitterAccount, loaded, usernameQuery, verifiedHandleEntry])\n\n  const primaryColor = '#2F80ED'\n  const secondaryColor = '#EBF4FF'\n\n  const ProfileContent = () => (\n    <SectionWrapper>\n      <BackgroundWrapper account={!!account}>\n        <TYPE.main fontSize=\"20px\" fontWeight=\"700\" style={{ marginBottom: '1rem' }}>\n          Your Sybil identity\n        </TYPE.main>\n        {!account ? (\n          <TYPE.body fontWeight={500} fontSize=\"14px\" color={primaryColor} mb=\"1rem\">\n            Connect wallet to link wallet address to Sybil identity.\n            <ButtonCustom\n              color={primaryColor}\n              bgColor={secondaryColor}\n              style={{\n                fontWeight: 500,\n                fontSize: '16px',\n                marginTop: '16px',\n              }}\n              onClick={() => toggleWalletModal()}\n            >\n              Connect Wallet\n            </ButtonCustom>\n          </TYPE.body>\n        ) : (\n          <AutoColumn gap=\"16px\">\n            <WalletSummary />\n            {!verifiedHandleEntry && account ? (\n              !twitterAccount ? (\n                <TwitterLoginButton text=\"Add a public identity\" />\n              ) : (\n                <TwitterButton\n                  onClick={() => {\n                    ReactGA.event({\n                      category: 'Social',\n                      action: 'Start Link',\n                      label: 'Not linked',\n                    })\n                    setShowTwitterFlow(true)\n                  }}\n                >\n                  <RowBetween>\n                    <TYPE.white fontSize=\"14px\">Add a public identity</TYPE.white>\n                    <TwitterLogo src={TwitterIcon} />\n                  </RowBetween>\n                </TwitterButton>\n              )\n            ) : null}\n            {!verifiedHandleEntry && account ? (\n              <TYPE.blue fontSize=\"14px\">\n                {`If the governance program you're participating in is not listed here, you can still add an identity to your ethereum address. Connecting your Twitter to your address can help people find you.`}\n              </TYPE.blue>\n            ) : null}\n          </AutoColumn>\n        )}\n      </BackgroundWrapper>\n    </SectionWrapper>\n  )\n\n  return (\n    <>\n      <Modal isOpen={showTwitterFlow} onDismiss={() => setShowTwitterFlow(false)}>\n        <TwitterFlow onDismiss={() => setShowTwitterFlow(false)} />\n      </Modal>\n      <ProfileContent />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}