{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { namehash } from 'ethers/lib/utils';\nimport { useMemo, useEffect } from 'react';\nimport { useSingleCallResult } from '../state/multicall/hooks';\nimport { isAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract';\nimport useDebounce from './useDebounce';\nimport { useActiveWeb3React } from '.';\n/**\n * Does a reverse lookup for an address to find its ENS name.\n * Note this is not the same as looking up an ENS name to find an address.\n */\n\nexport default function useENSName(address) {\n  _s();\n\n  var _resolverAddress$resu, _name$result$, _name$result;\n\n  const debouncedAddress = useDebounce(address, 200);\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined];\n\n    try {\n      return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined];\n    } catch (error) {\n      return [undefined];\n    }\n  }, [debouncedAddress]);\n  const registrarContract = useENSRegistrarContract(false);\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\n  const resolverAddressResult = (_resolverAddress$resu = resolverAddress.result) === null || _resolverAddress$resu === void 0 ? void 0 : _resolverAddress$resu[0];\n  const resolverContract = useENSResolverContract(resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined, false);\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument);\n  const changed = debouncedAddress !== address;\n  return {\n    ENSName: changed ? null : (_name$result$ = (_name$result = name.result) === null || _name$result === void 0 ? void 0 : _name$result[0]) !== null && _name$result$ !== void 0 ? _name$result$ : null,\n    loading: changed || resolverAddress.loading || name.loading\n  };\n}\n\n_s(useENSName, \"8g3MyTb9JnGx6yiMJXxKZlnslKc=\", false, function () {\n  return [useDebounce, useENSRegistrarContract, useSingleCallResult, useENSResolverContract, useSingleCallResult];\n});\n\nexport function useBulkENS(addresses) {\n  _s2();\n\n  const {\n    library\n  } = useActiveWeb3React();\n  useEffect(() => {\n    async function fetchAllAddresses() {\n      const answers = await Promise.all(addresses.map(a => {\n        return library === null || library === void 0 ? void 0 : library.lookupAddress(a);\n      }));\n      const amountHave = answers.reduce((accum, name) => {\n        if (name) {\n          return accum = accum + 1;\n        }\n\n        return accum;\n      }, 0);\n      console.log('amount have: ' + amountHave + ' / ' + answers.length);\n    }\n\n    fetchAllAddresses();\n  }, [addresses, library]);\n  return {\n    names: [''],\n    loading: false\n  };\n}\n\n_s2(useBulkENS, \"t0N+bn7bZoAYBkAZWqTNCwT+XQQ=\", false, function () {\n  return [useActiveWeb3React];\n});","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/sybil-interf/src/hooks/useENSName.ts"],"names":["namehash","useMemo","useEffect","useSingleCallResult","isAddress","isZero","useENSRegistrarContract","useENSResolverContract","useDebounce","useActiveWeb3React","useENSName","address","debouncedAddress","ensNodeArgument","undefined","toLowerCase","substr","error","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","name","changed","ENSName","loading","useBulkENS","addresses","library","fetchAllAddresses","answers","Promise","all","map","a","lookupAddress","amountHave","reduce","accum","console","log","length","names"],"mappings":"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","sourcesContent":["import { namehash } from 'ethers/lib/utils'\nimport { useMemo, useEffect } from 'react'\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { isAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract'\nimport useDebounce from './useDebounce'\nimport { useActiveWeb3React } from '.'\n\n/**\n * Does a reverse lookup for an address to find its ENS name.\n * Note this is not the same as looking up an ENS name to find an address.\n */\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\n  const debouncedAddress = useDebounce(address, 200)\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined]\n    try {\n      return debouncedAddress ? [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)] : [undefined]\n    } catch (error) {\n      return [undefined]\n    }\n  }, [debouncedAddress])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false\n  )\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument)\n\n  const changed = debouncedAddress !== address\n  return {\n    ENSName: changed ? null : name.result?.[0] ?? null,\n    loading: changed || resolverAddress.loading || name.loading,\n  }\n}\n\nexport function useBulkENS(addresses: string[]): { names: string[] | null; loading: boolean } {\n  const { library } = useActiveWeb3React()\n\n  useEffect(() => {\n    async function fetchAllAddresses() {\n      const answers = await Promise.all(\n        addresses.map((a) => {\n          return library?.lookupAddress(a)\n        })\n      )\n      const amountHave = answers.reduce((accum, name) => {\n        if (name) {\n          return (accum = accum + 1)\n        }\n        return accum\n      }, 0)\n\n      console.log('amount have: ' + amountHave + ' / ' + answers.length)\n    }\n    fetchAllAddresses()\n  }, [addresses, library])\n\n  return {\n    names: [''],\n    loading: false,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}