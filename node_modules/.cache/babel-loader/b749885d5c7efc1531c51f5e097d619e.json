{"ast":null,"code":"import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { save, load } from 'redux-localstorage-simple';\nimport application from './application/reducer';\nimport governance from './governance/reducer';\nimport { updateVersion } from './global/actions';\nimport user from './user/reducer';\nimport transactions from './transactions/reducer';\nimport multicall from './multicall/reducer';\nimport social from './social/reducer';\nconst PERSISTED_KEYS = ['user', 'transactions'];\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    multicall,\n    governance,\n    social\n  },\n  middleware: [...getDefaultMiddleware({\n    thunk: false\n  }), save({\n    states: PERSISTED_KEYS\n  })],\n  preloadedState: load({\n    states: PERSISTED_KEYS\n  })\n});\nstore.dispatch(updateVersion());\nexport default store;","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/sybil-interf/src/state/index.ts"],"names":["configureStore","getDefaultMiddleware","save","load","application","governance","updateVersion","user","transactions","multicall","social","PERSISTED_KEYS","store","reducer","middleware","thunk","states","preloadedState","dispatch"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,2BAA3B;AAEA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,MAAMC,cAAwB,GAAG,CAAC,MAAD,EAAS,cAAT,CAAjC;AAEA,MAAMC,KAAK,GAAGZ,cAAc,CAAC;AAC3Ba,EAAAA,OAAO,EAAE;AACPT,IAAAA,WADO;AAEPG,IAAAA,IAFO;AAGPC,IAAAA,YAHO;AAIPC,IAAAA,SAJO;AAKPJ,IAAAA,UALO;AAMPK,IAAAA;AANO,GADkB;AAS3BI,EAAAA,UAAU,EAAE,CAAC,GAAGb,oBAAoB,CAAC;AAAEc,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAxB,EAA4Cb,IAAI,CAAC;AAAEc,IAAAA,MAAM,EAAEL;AAAV,GAAD,CAAhD,CATe;AAU3BM,EAAAA,cAAc,EAAEd,IAAI,CAAC;AAAEa,IAAAA,MAAM,EAAEL;AAAV,GAAD;AAVO,CAAD,CAA5B;AAaAC,KAAK,CAACM,QAAN,CAAeZ,aAAa,EAA5B;AAEA,eAAeM,KAAf","sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport application from './application/reducer'\nimport governance from './governance/reducer'\nimport { updateVersion } from './global/actions'\nimport user from './user/reducer'\nimport transactions from './transactions/reducer'\nimport multicall from './multicall/reducer'\nimport social from './social/reducer'\n\nconst PERSISTED_KEYS: string[] = ['user', 'transactions']\n\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    multicall,\n    governance,\n    social,\n  },\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\n  preloadedState: load({ states: PERSISTED_KEYS }),\n})\n\nstore.dispatch(updateVersion())\n\nexport default store\n\nexport type AppState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n"]},"metadata":{},"sourceType":"module"}