{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useSubgraphClient } from '../application/hooks';\nimport { useAllIdentities } from '../social/hooks';\nimport { fetchTopDelegates, fetchVerifiedDelegates, fetchGlobalData, fetchTopDelegatesOffset } from '../../data/governance';\nimport { useTopDelegates, useVerifiedDelegates, useGlobalData, useMaxFetched, useActiveProtocol } from './hooks';\nimport { FETCHING_INTERVAL } from './reducer';\nexport default function Updater() {\n  _s();\n\n  // fetched all indentity info if haven't yet\n  const {\n    library\n  } = useActiveWeb3React(); // get graphql client for active protocol\n\n  const client = useSubgraphClient();\n  const [allIdentities] = useAllIdentities();\n  const [activeProtocol] = useActiveProtocol();\n  const [topDelegates, setTopDelegates] = useTopDelegates();\n  const [, setVerifiedDelegates] = useVerifiedDelegates(); // fetch global data stats for protocol if not loaded\n\n  const [globalData, setGlobalData] = useGlobalData();\n  useEffect(() => {\n    if (!globalData) {\n      fetchGlobalData(client).then(data => {\n        if (data) {\n          setGlobalData(data);\n        }\n      });\n    }\n  }, [client, globalData, setGlobalData]);\n  const [maxFetched, setMaxFetched] = useMaxFetched(); // udpate maxed fetched amount if protocol is active\n\n  useEffect(() => {\n    if (activeProtocol && !maxFetched) {\n      setMaxFetched(FETCHING_INTERVAL);\n    }\n  }, [activeProtocol, maxFetched, setMaxFetched]);\n  useEffect(() => {\n    async function fetchTopDelegateData() {\n      try {\n        library && allIdentities && client && fetchTopDelegates(client, library, allIdentities).then(async delegateData => {\n          if (delegateData) {\n            setTopDelegates(delegateData);\n          }\n        });\n      } catch (e) {\n        console.log('ERROR:' + e);\n      }\n    }\n\n    fetchTopDelegateData();\n  }, [library, client, allIdentities, setTopDelegates]); // fetch additional data and concat if needed\n\n  useEffect(() => {\n    async function fetchTopDelegateData() {\n      if (library && allIdentities && client && topDelegates && maxFetched && globalData && topDelegates.length < maxFetched && maxFetched < globalData.totalDelegates // dont fetch if we'eve reach max amount of delegates\n      ) {\n          try {\n            fetchTopDelegatesOffset(client, library, allIdentities, maxFetched).then(async delegateData => {\n              if (delegateData) {\n                setTopDelegates(topDelegates.concat(delegateData));\n              }\n            });\n          } catch (e) {\n            console.log('ERROR:' + e);\n          }\n        }\n    }\n\n    fetchTopDelegateData();\n  }, [library, client, allIdentities, setTopDelegates, topDelegates, maxFetched, globalData]);\n  useEffect(() => {\n    async function fetchVerifiedDelegateData() {\n      try {\n        library && allIdentities && client && fetchVerifiedDelegates(client, library, allIdentities).then(async delegateData => {\n          if (delegateData) {\n            setVerifiedDelegates(delegateData);\n          }\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    fetchVerifiedDelegateData();\n  }, [library, client, allIdentities, setVerifiedDelegates]);\n  return null;\n}\n\n_s(Updater, \"4KDGq5JU/7IX4tqHfmH67t4X5O0=\", false, function () {\n  return [useActiveWeb3React, useSubgraphClient, useAllIdentities, useActiveProtocol, useTopDelegates, useVerifiedDelegates, useGlobalData, useMaxFetched];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["/Users/safahi/Documents/GitHub/sybil-interf/src/state/governance/updater.ts"],"names":["useEffect","useActiveWeb3React","useSubgraphClient","useAllIdentities","fetchTopDelegates","fetchVerifiedDelegates","fetchGlobalData","fetchTopDelegatesOffset","useTopDelegates","useVerifiedDelegates","useGlobalData","useMaxFetched","useActiveProtocol","FETCHING_INTERVAL","Updater","library","client","allIdentities","activeProtocol","topDelegates","setTopDelegates","setVerifiedDelegates","globalData","setGlobalData","then","data","maxFetched","setMaxFetched","fetchTopDelegateData","delegateData","e","console","log","length","totalDelegates","concat","fetchVerifiedDelegateData"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useSubgraphClient } from '../application/hooks'\nimport { useAllIdentities } from '../social/hooks'\nimport {\n  fetchTopDelegates,\n  fetchVerifiedDelegates,\n  fetchGlobalData,\n  fetchTopDelegatesOffset,\n} from '../../data/governance'\nimport { useTopDelegates, useVerifiedDelegates, useGlobalData, useMaxFetched, useActiveProtocol } from './hooks'\nimport { GlobaData, FETCHING_INTERVAL } from './reducer'\n\nexport default function Updater(): null {\n  // fetched all indentity info if haven't yet\n  const { library } = useActiveWeb3React()\n\n  // get graphql client for active protocol\n  const client = useSubgraphClient()\n\n  const [allIdentities] = useAllIdentities()\n\n  const [activeProtocol] = useActiveProtocol()\n\n  const [topDelegates, setTopDelegates] = useTopDelegates()\n  const [, setVerifiedDelegates] = useVerifiedDelegates()\n\n  // fetch global data stats for protocol if not loaded\n  const [globalData, setGlobalData] = useGlobalData()\n  useEffect(() => {\n    if (!globalData) {\n      fetchGlobalData(client).then((data: GlobaData | null) => {\n        if (data) {\n          setGlobalData(data)\n        }\n      })\n    }\n  }, [client, globalData, setGlobalData])\n\n  const [maxFetched, setMaxFetched] = useMaxFetched()\n\n  // udpate maxed fetched amount if protocol is active\n  useEffect(() => {\n    if (activeProtocol && !maxFetched) {\n      setMaxFetched(FETCHING_INTERVAL)\n    }\n  }, [activeProtocol, maxFetched, setMaxFetched])\n\n  useEffect(() => {\n    async function fetchTopDelegateData() {\n      try {\n        library &&\n          allIdentities &&\n          client &&\n          fetchTopDelegates(client, library, allIdentities).then(async (delegateData) => {\n            if (delegateData) {\n              setTopDelegates(delegateData)\n            }\n          })\n      } catch (e) {\n        console.log('ERROR:' + e)\n      }\n    }\n    fetchTopDelegateData()\n  }, [library, client, allIdentities, setTopDelegates])\n\n  // fetch additional data and concat if needed\n  useEffect(() => {\n    async function fetchTopDelegateData() {\n      if (\n        library &&\n        allIdentities &&\n        client &&\n        topDelegates &&\n        maxFetched &&\n        globalData &&\n        topDelegates.length < maxFetched &&\n        maxFetched < globalData.totalDelegates // dont fetch if we'eve reach max amount of delegates\n      ) {\n        try {\n          fetchTopDelegatesOffset(client, library, allIdentities, maxFetched).then(async (delegateData) => {\n            if (delegateData) {\n              setTopDelegates(topDelegates.concat(delegateData))\n            }\n          })\n        } catch (e) {\n          console.log('ERROR:' + e)\n        }\n      }\n    }\n    fetchTopDelegateData()\n  }, [library, client, allIdentities, setTopDelegates, topDelegates, maxFetched, globalData])\n\n  useEffect(() => {\n    async function fetchVerifiedDelegateData() {\n      try {\n        library &&\n          allIdentities &&\n          client &&\n          fetchVerifiedDelegates(client, library, allIdentities).then(async (delegateData) => {\n            if (delegateData) {\n              setVerifiedDelegates(delegateData)\n            }\n          })\n      } catch (e) {\n        console.log(e)\n      }\n    }\n    fetchVerifiedDelegateData()\n  }, [library, client, allIdentities, setVerifiedDelegates])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}