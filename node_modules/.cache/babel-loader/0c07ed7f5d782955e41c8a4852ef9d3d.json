{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Downloads/sybil-interface-candle/src/components/Web3Status/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useWeb3React } from '@web3-react/core';\nimport React, { useMemo } from 'react';\nimport { NetworkContextName } from '../../constants';\nimport useENSName from '../../hooks/useENSName';\nimport { isTransactionRecent, useAllTransactions } from '../../state/transactions/hooks';\nimport WalletModal from '../WalletModal'; // we want the latest one to come first, so return negative if a is after b\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function newTransactionsFirst(a, b) {\n  return b.addedTime - a.addedTime;\n}\nexport default function Web3Status() {\n  _s();\n\n  const {\n    active,\n    account\n  } = useWeb3React();\n  const contextNetwork = useWeb3React(NetworkContextName);\n  const {\n    ENSName\n  } = useENSName(account !== null && account !== void 0 ? account : undefined);\n  const allTransactions = useAllTransactions();\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions);\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst);\n  }, [allTransactions]);\n  const pending = sortedRecentTransactions.filter(tx => !tx.receipt).map(tx => tx.hash);\n  const confirmed = sortedRecentTransactions.filter(tx => tx.receipt).map(tx => tx.hash);\n\n  if (!contextNetwork.active && !active) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(WalletModal, {\n    ENSName: ENSName !== null && ENSName !== void 0 ? ENSName : undefined,\n    pendingTransactions: pending,\n    confirmedTransactions: confirmed\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Web3Status, \"IWjw+i7uZQ38pmuoA0qZhUKwHhw=\", false, function () {\n  return [useWeb3React, useWeb3React, useENSName, useAllTransactions];\n});\n\n_c = Web3Status;\n\nvar _c;\n\n$RefreshReg$(_c, \"Web3Status\");","map":{"version":3,"sources":["/Users/safahi/Downloads/sybil-interface-candle/src/components/Web3Status/index.tsx"],"names":["useWeb3React","React","useMemo","NetworkContextName","useENSName","isTransactionRecent","useAllTransactions","WalletModal","newTransactionsFirst","a","b","addedTime","Web3Status","active","account","contextNetwork","ENSName","undefined","allTransactions","sortedRecentTransactions","txs","Object","values","filter","sort","pending","tx","receipt","map","hash","confirmed"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,OAAOC,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,SAASC,mBAAT,EAA8BC,kBAA9B,QAAwD,gCAAxD;AAGA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;;AACA,OAAO,SAASC,oBAAT,CAA8BC,CAA9B,EAAqDC,CAArD,EAA4E;AACjF,SAAOA,CAAC,CAACC,SAAF,GAAcF,CAAC,CAACE,SAAvB;AACD;AAED,eAAe,SAASC,UAAT,GAAsB;AAAA;;AACnC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAsBd,YAAY,EAAxC;AACA,QAAMe,cAAc,GAAGf,YAAY,CAACG,kBAAD,CAAnC;AAEA,QAAM;AAAEa,IAAAA;AAAF,MAAcZ,UAAU,CAACU,OAAD,aAACA,OAAD,cAACA,OAAD,GAAYG,SAAZ,CAA9B;AAEA,QAAMC,eAAe,GAAGZ,kBAAkB,EAA1C;AAEA,QAAMa,wBAAwB,GAAGjB,OAAO,CAAC,MAAM;AAC7C,UAAMkB,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcJ,eAAd,CAAZ;AACA,WAAOE,GAAG,CAACG,MAAJ,CAAWlB,mBAAX,EAAgCmB,IAAhC,CAAqChB,oBAArC,CAAP;AACD,GAHuC,EAGrC,CAACU,eAAD,CAHqC,CAAxC;AAKA,QAAMO,OAAO,GAAGN,wBAAwB,CAACI,MAAzB,CAAiCG,EAAD,IAAQ,CAACA,EAAE,CAACC,OAA5C,EAAqDC,GAArD,CAA0DF,EAAD,IAAQA,EAAE,CAACG,IAApE,CAAhB;AACA,QAAMC,SAAS,GAAGX,wBAAwB,CAACI,MAAzB,CAAiCG,EAAD,IAAQA,EAAE,CAACC,OAA3C,EAAoDC,GAApD,CAAyDF,EAAD,IAAQA,EAAE,CAACG,IAAnE,CAAlB;;AAEA,MAAI,CAACd,cAAc,CAACF,MAAhB,IAA0B,CAACA,MAA/B,EAAuC;AACrC,WAAO,IAAP;AACD;;AAED,sBAAO,QAAC,WAAD;AAAa,IAAA,OAAO,EAAEG,OAAF,aAAEA,OAAF,cAAEA,OAAF,GAAaC,SAAjC;AAA4C,IAAA,mBAAmB,EAAEQ,OAAjE;AAA0E,IAAA,qBAAqB,EAAEK;AAAjG;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GArBuBlB,U;UACMZ,Y,EACLA,Y,EAEHI,U,EAEIE,kB;;;KANFM,U","sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport React, { useMemo } from 'react'\nimport { NetworkContextName } from '../../constants'\nimport useENSName from '../../hooks/useENSName'\nimport { isTransactionRecent, useAllTransactions } from '../../state/transactions/hooks'\nimport { TransactionDetails } from '../../state/transactions/reducer'\n\nimport WalletModal from '../WalletModal'\n\n// we want the latest one to come first, so return negative if a is after b\nexport function newTransactionsFirst(a: TransactionDetails, b: TransactionDetails) {\n  return b.addedTime - a.addedTime\n}\n\nexport default function Web3Status() {\n  const { active, account } = useWeb3React()\n  const contextNetwork = useWeb3React(NetworkContextName)\n\n  const { ENSName } = useENSName(account ?? undefined)\n\n  const allTransactions = useAllTransactions()\n\n  const sortedRecentTransactions = useMemo(() => {\n    const txs = Object.values(allTransactions)\n    return txs.filter(isTransactionRecent).sort(newTransactionsFirst)\n  }, [allTransactions])\n\n  const pending = sortedRecentTransactions.filter((tx) => !tx.receipt).map((tx) => tx.hash)\n  const confirmed = sortedRecentTransactions.filter((tx) => tx.receipt).map((tx) => tx.hash)\n\n  if (!contextNetwork.active && !active) {\n    return null\n  }\n\n  return <WalletModal ENSName={ENSName ?? undefined} pendingTransactions={pending} confirmedTransactions={confirmed} />\n}\n"]},"metadata":{},"sourceType":"module"}